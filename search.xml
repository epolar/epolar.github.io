<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[RecyclerView 的使用]]></title>
      <url>http://eraise.xyz/2016/08/09/recyclerview-e7-9a-84-e4-bd-bf-e7-94-a8/</url>
      <content type="html"><![CDATA[<h3 id="·-简介"><a href="#·-简介" class="headerlink" title="· 简介"></a>· 简介</h3><p>RecyclerView 已经不是一个新的东西了，我相信大部分的 Android 开发者都已经开始使用了。碰上过许多朋友问我：RecyclerView 跟 ListView 相比，有什么好处？我总是只能回答：更灵活，更新！灵活在哪里我说不出来，新也不是使用它的理由 – 况且使用它还更麻烦了。使用 RecyclerView 和 ListView 差不多，只是需要一个而已管理器， LinearLayoutManager GridLayoutManager 什么的。<br>但是这样就算是会用了吗？除了更麻烦以外(没有 onItemClickListener onItemLongClickListener，设置 Header Footer也麻烦些)，它有什么好处？</p>
<p>还有什么好处，我也不知道，以上都是废话。。。。</p>
<h3 id="·-既然如此，那我写这个要干嘛？"><a href="#·-既然如此，那我写这个要干嘛？" class="headerlink" title="· 既然如此，那我写这个要干嘛？"></a>· 既然如此，那我写这个要干嘛？</h3><p>想要普及 RecyclerView 几个简单的，却能提升用户体验的东西，看一下我的效果：<br><img src="/image/2016-08-recyclerview.gif" alt=""></p>
<p>比 ListView 更容易的实现动画、拖拽等。</p>
<h3 id="·-介绍工具吧！"><a href="#·-介绍工具吧！" class="headerlink" title="· 介绍工具吧！"></a>· 介绍工具吧！</h3><p>所谓工具，就是相关的几个类，有兴趣的可以去看看详细的信息，没兴趣的可以直接看代码了：</p>
<ul>
<li><a href="https://developer.android.com/reference/android/support/v7/widget/helper/ItemTouchHelper.html" target="_blank" rel="external">RecyclerView.ItemTouchHelper</a> 滑动删除、拖拽这次 Android 终于帮我们实现了</li>
<li><a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.ItemDecoration.html" target="_blank" rel="external">RecyclerView.ItemDecoration</a> ItemTouchHelper 的老爹来了，用它能实现不少事情，网上也有用它来实现方便的 onItemClickListener 什么的，善加利用一定是个好东西</li>
</ul>
<h3 id="·-coding…"><a href="#·-coding…" class="headerlink" title="· coding…"></a>· coding…</h3><ul>
<li>写xml，写 Activity 的就省略了</li>
<li><p>ViewHolder，代码没逻辑不细述</p>
<p>public class MyViewHolder extends RecyclerView.ViewHolder {</p>
<pre><code>public TextView tvName;
public TextView tvPhone;
public TextView tvAddress;

public MyViewHolder(View itemView) {
    super(itemView);

    findViews();
}

private void findViews() {
    tvName = (TextView) itemView.findViewById(R.id.tv_name);
    tvPhone = (TextView) itemView.findViewById(R.id.tv_phone);
    tvAddress = (TextView) itemView.findViewById(R.id.tv_address);
}
</code></pre><p>}<br>`</p>
</li>
<li><p>再写一个 Adapter，代码没逻辑，不细述</p>
<pre>`public class MyAdapter extends RecyclerView.Adapter&lt;MyViewHolder&gt; {

    private Context context;
    private ArrayList&lt;AddressInfo&gt; data;

    public MyAdapter(Context context) {
        this.context = context;
        data = new ArrayList&lt;&gt;();
    }

    public void add(AddressInfo info) {
        data.add(info);
    }

    public void add(int position, AddressInfo info) {
        data.add(position, info);
    }

    public void remove(AddressInfo info) {
        data.remove(info);
    }

    public void remove(int position) {
        data.remove(position);
    }

    public AddressInfo getAddressInfo(int position) {
        return data.get(position);
    }

    @Override
    public MyViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
        return new MyViewHolder(LayoutInflater.from(context).inflate(R.layout.item_address, parent, false));
    }

    @Override
    public void onBindViewHolder(MyViewHolder holder, int position) {
        AddressInfo info = data.get(position);

        holder.tvName.setText(info.name);
        holder.tvPhone.setText(info.phone);
        holder.tvAddress.setText(holder.tvAddress.getResources().getString(R.string.address_, info.address));
    }

    @Override
    public int getItemCount() {
        return data.size();
    }
}
`</pre>
</li>
<li><p>希望 Item 之间能有个分割线，可以加个 Decorator</p>
<pre>`/**
 * ItemDecoration 是用来装饰 Item 的，用它可以做许多事情， ItemTouchHelper 就是它的子类，&lt;br/&gt;
 * 通过 ItemDecoration 可以去绘制分割线、自定义一个 OnClickListener 等
 * &lt;br/&gt;
 * &lt;br/&gt;
 * {@link #onDraw(Canvas, RecyclerView, RecyclerView.State)} 和 {@link #onDrawOver(Canvas, RecyclerView, RecyclerView.State)} 的区别是画在上面还是画在下面，over画的东西将会覆盖在 Item 之上
 */
public class MyDecorator extends RecyclerView.ItemDecoration {

    @Override
    public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {
        if (parent.getChildAdapterPosition(view) == 0)  // getChildAdapterPosition 可以得到 childView 在 Adapter 中的 position
            outRect.top = 0;
        else {
            outRect.top = dp2px(10, view.getContext());
        }
    }

    private int dp2px(int dp, Context context) {
        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());
    }
}
`</pre>
</li>
<li><p>MainActivity，这里的我拆开</p>
</li>
<li><p>对 RecyclerView 进行一些初始化</p>
<pre>`// 最基础使用的设置
mAdapter = new MyAdapter(this);
        // 设置布局方式为线性垂直
        mRecyclerView.setLayoutManager(new LinearLayoutManager(this));
        mRecyclerView.setAdapter(mAdapter);
        mRecyclerView.addItemDecoration(new MyDecorator());
`</pre>

<pre>`// 滑动滚动需要 ItemTouchHelper，而 ItemTouchHelper 需要一个回调来得知自己应该如何去处理用户的触摸事件
ItemTouchHelper touchHelper = new ItemTouchHelper(new ItemTouchHelper.Callback() {
            @Override
            public int getMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder) {
                // 设置为允许向左滑动，允许向上向下托拽
                return makeFlag(ItemTouchHelper.ACTION_STATE_DRAG,
                            ItemTouchHelper.UP | ItemTouchHelper.DOWN)
                        | makeFlag(ItemTouchHelper.ACTION_STATE_SWIPE, ItemTouchHelper.LEFT);
            }

            @Override
            public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
                // 改变数据位置
                int position = viewHolder.getAdapterPosition();
                int targetPosition = target.getAdapterPosition();
                if (position == targetPosition) {
                    return false;
                }
                Log.d("drag", position + ", " + targetPosition);
                AddressInfo info = mAdapter.getAddressInfo(position);
                mAdapter.remove(position);
                mAdapter.add(targetPosition, info);
                mAdapter.notifyItemMoved(position, targetPosition);

                return true;
            }

            @Override
            public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
                // getAdapterPosition可以得到 ViewHolder 在 Adapter 中的位置
                int position = viewHolder.getAdapterPosition();
                mAdapter.remove(position);
                mAdapter.notifyItemRemoved(position);
            }
        });
`</pre>

<p><pre>`// 最后将 ItemTouchHelper 跟 RecyclerView 做一下关联<br>touchHelper.attachToRecyclerView(mRecyclerView);</pre></p>
</li>
<li><p>通过以上的代码，RecyclerView 运行滑动删除、上下拖拽，不过为了让效果更好，需要用 RecyclerView 新引入的<span style="color:red">局部刷新</span>，局部刷新通过调用<code>mAdapter.notifyItemInserted(0)</code> <code>mAdapter.notifyItemMoved(position, targetPosition)</code> <code>mAdapter.notifyItemRemoved(position)</code> 来完成。</p>
</li>
</ul>
<h3 id="·-这是个简单的教程，没什么内容，所以结束了。。。"><a href="#·-这是个简单的教程，没什么内容，所以结束了。。。" class="headerlink" title="· 这是个简单的教程，没什么内容，所以结束了。。。"></a>· 这是个简单的教程，没什么内容，所以结束了。。。</h3><blockquote>
<p>我有一个界面，在 RecyclerView 的最底下有一个按钮，点击就会添加一行，如果满5个，这个按钮就没消失，item减少的时候，这个按钮又会出来。这个时候，在执行 <code>mAdapter.notifyItemRemoved()</code>后，我去点击按钮，结果崩溃了，解救的方法是，在 removed 之后， insert 一个。</p>
</blockquote>
<p><a href="/raw/RecyclerDemo.zip">源码下载</a></p>
<p>相关资料：</p>
<ul>
<li><a href="http://stackoverflow.com/a/27037230/4737579" target="_blank" rel="external">在 RecyclerView 的 Item 之间添加间距</a></li>
<li><a href="http://stackoverflow.com/a/30644208/4737579" target="_blank" rel="external">RecyclerView 通过 ItemTouchHelper 实现拖拽</a></li>
<li><a href="http://stackoverflow.com/a/30601554/4737579" target="_blank" rel="external">RecyclerView 通过 ItemTouchHelper 实现滑动删除</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[我的指针在乱指？C++内存的一个坑]]></title>
      <url>http://eraise.xyz/2016/08/01/e6-88-91-e7-9a-84-e6-8c-87-e9-92-88-e5-9c-a8-e4-b9-b1-e6-8c-87-ef-bc-9fc-e5-86-85-e5-ad-98-e7-9a-84-e4-b8-80-e4-b8-aa-e5-9d-91-md/</url>
      <content type="html"><![CDATA[<h3 id="·-故事的开头"><a href="#·-故事的开头" class="headerlink" title="· 故事的开头"></a>· 故事的开头</h3><p>最近又想学C++了，又看了一遍，这次回顾到了模板这里，例子是用 vector 去实现 Stack，我就想自己用链式来实现一个好了。链式的思路其实是很简单的，我觉得它应该是最简单的：每个结点记住自己的前一个结点是什么，Stack记住最后一个进来的结点，然后就能 push 啊 pop 啊的，想想挺简单的，10分钟搞定。</p>
<h3 id="·-前方熊出没"><a href="#·-前方熊出没" class="headerlink" title="· 前方熊出没"></a>· 前方熊出没</h3><p>很开心的花了几分钟，写好了代码段，代码里有 <code>StackElement</code> <code>Stack</code> <code>Teacher</code> 三个类，然后有一个 main。但是在运行时，却 Crash 了。我找了很久很久，找不到原因</p>
<h3 id="·-不会Debug怎么办？"><a href="#·-不会Debug怎么办？" class="headerlink" title="· 不会Debug怎么办？"></a>· 不会Debug怎么办？</h3><p>我用 sublime 写代码，minGW 编译运行，不懂得 C++ 怎么调试，所以我只能用笨方法去找出 Crash 的原因了：我把代码简单拆解，尝试只push是否有问题，push后只 pop 一个是否有问题。最后我发现，两次 pop 的时候就会出问题。 之后，我开始在 pop 的地方打印日志，这样我就能知道哪里出了问题了，日志的内容是 Stack 的 top 结点。结果出来了， top 结点指向了一个不曾出现的内存(为什么我知道它是不曾出现未经分配的呢？其实我也不知道，所以我在生成把有生成对象的操作的地方都打印出了对象的内存，最后发现，那个内存地址没在我的程序中被分配)。于是我就想，可能是 push 的时候出的问题？好家伙，确实是在 push 的时候出的问题，此时，我的代码长成下面的样子：</p>
<h3 id="我认为代码错误出现在…"><a href="#我认为代码错误出现在…" class="headerlink" title="- 我认为代码错误出现在…"></a>- 我认为代码错误出现在…</h3><pre><code>void push(T &amp;amp;obj) {
        StackElement&amp;lt;T&amp;gt; t;
        t.setCurrent(obj);
        t.setPrev(*top);
        top = t;
        size ++;
    }
`&lt;/pre&gt;

但是，这方法哪里出问题了？以我多年Android开发经验来看，嗯，这段代码没问题， t 是新生成的，可是，为什么打印的结果就是错的， top 一直都存在问题呢？
这一整天，我都在研究这个地方到底出了什么问题，我以为是指针出了问题， * &amp;amp; 各种换，但是，结果都不曾变过，那么，到底是哪里出啊问题？

### · 果然不懂就要问

我想去 StackOverFlow 上问一下大神们，可是我那 pool 的 英格利许 不允许我那么做，所以我硬着头皮 google 别人写的同样思路的代码，各种研究。此时，一个 Android 开发群里有人在问 Retrofit 设置 Https 证书的问题，我趁着有人开车，上车了，问了一下，才知道结果竟是如此简单！

### · 结果如此出乎意料而又在常理之中，以下为大神回答原话
</code></pre><ul>
<li>你的t是局部变量</li>
<li>那你put退出的时候，t都无效了</li>
<li>t在栈上，会继续被填充为其他数据</li>
<li>你top不会瞎指，但是指向的内容一致在瞎变</li>
<li>new 一个</li>
<li><p>必须new. const啥的，是不行的<br>What?竟然是必须要 new？不 new 的话，内存会被重复使用，所以我以为指针乱指？好滴，new一个。 结果出来了，真的是这样！！！</p>
<h3 id="·-所以呢？"><a href="#·-所以呢？" class="headerlink" title="· 所以呢？"></a>· 所以呢？</h3><p>老实说我真不会总结，所以这就是个记录，没有说明什么，我即不会在这里说new跟不new的区别 ，也不会说。。我还能说什么呢？其实我自己也不懂。<br>  讲真，局部变量如果需要重复使用，或者说要给外部使用的话，那就应该 new ，否则离开了局部，内存会被重复使用，引发奇怪的BUG出事，当然，我这还没开始考虑内存回收需要 <code>delete</code>，C++的内存管理之蛋疼可见一般！</p>
<h3 id="·-成品代码"><a href="#·-成品代码" class="headerlink" title="· 成品代码"></a>· 成品代码</h3><p><pre>`#include &lt;iostream&gt;<br>#include &lt;string&gt;</pre></p>
<p>using namespace std;</p>
<p>template &lt;class T&gt;<br>class StackElement {<br>private:</p>
<pre><code>T * current = NULL;
StackElement&amp;lt;T&amp;gt; * prev = NULL;
</code></pre><p>public:</p>
<pre><code>void setCurrent(T &amp;amp;obj) {
    current = &amp;amp;obj;
}

void setPrev(StackElement&amp;lt;T&amp;gt; &amp;amp;obj) {
    prev = &amp;amp;obj;
}

T * getCurrent() {
    return current;
}

StackElement&amp;lt;T&amp;gt; * getPrev() {
    return prev;
}
</code></pre><p>};</p>
<p>template &lt;class T&gt;<br>class Stack {<br>private:</p>
<pre><code>StackElement&amp;lt;T&amp;gt; * top = NULL;
int size;
</code></pre><p>public:</p>
<pre><code>Stack() {
    size = 0;
}
void push(T &amp;amp;obj) {
    StackElement&amp;lt;T&amp;gt; * t = new StackElement&amp;lt;T&amp;gt;;
    t -&amp;gt; setCurrent(obj);
    t -&amp;gt; setPrev(*top);
    top = t;
    size ++;
}

T * pop() {
    if (top) {
        T * result = top -&amp;gt; getCurrent();
        StackElement&amp;lt;T&amp;gt; * prev = top -&amp;gt; getPrev();
        delete top;
        if (prev) {
            top = prev;
        } else {
            top = NULL;
        }
        size --;
        return result;
    }
}

int getSize() {
    return size;
}
</code></pre><p>};</p>
<p>class Teacher {<br>private:</p>
<pre><code>string name;
</code></pre><p>public:</p>
<pre><code>Teacher(string name) {
    this -&amp;gt; name = name;
}
string getName() {
    return name;
}
void showInfo() {
    cout &amp;lt;&amp;lt; &quot;name : &quot; &amp;lt;&amp;lt; getName() &amp;lt;&amp;lt; endl;
}
~Teacher() {
    cout &amp;lt;&amp;lt; &quot;destory Teacher : &quot; &amp;lt;&amp;lt; getName() &amp;lt;&amp;lt; endl;
}
</code></pre><p>};</p>
<p>int main(){</p>
<pre><code>try {
    Teacher lee(&quot;Lee&quot;);
    Teacher tom(&quot;Tom&quot;);
    lee.showInfo();
    tom.showInfo();

    Stack&amp;lt;Teacher&amp;gt; stack;
    stack.put(lee);
    stack.put(tom);
    cout &amp;lt;&amp;lt; &quot;size : &quot; &amp;lt;&amp;lt; stack.getSize() &amp;lt;&amp;lt; endl;

    stack.push() -&amp;gt; showInfo();
    stack.push() -&amp;gt; showInfo();

    cout &amp;lt;&amp;lt; &quot;size : &quot; &amp;lt;&amp;lt; stack.getSize() &amp;lt;&amp;lt; endl;
} catch (exception&amp;amp; err) {
    cerr &amp;lt;&amp;lt; &quot;error: &quot; &amp;lt;&amp;lt; err.what() &amp;lt;&amp;lt; endl;
    return -1;
}

return 0;
</code></pre><p>}</p>
</li>
</ul>
<p>结果输出：</p>
<blockquote>
<p>name : Lee<br>  name : Tom<br>  size : 2<br>  name : Tom<br>  name : Lee<br>  size : 0<br>  destory Teacher : Tom<br>  destory Teacher : Lee</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[测 · ListView在滚动中切换Adapter]]></title>
      <url>http://eraise.xyz/2016/06/02/e6-b5-8b-c2-b7-listview-e5-9c-a8-e6-bb-9a-e5-8a-a8-e4-b8-ad-e5-88-87-e6-8d-a2adapter-md/</url>
      <content type="html"><![CDATA[<p>像新浪微博Android端个人主页那样在滚动中切换了数据，界面还在滚动，一开始呢，我以为它自己写了控件，不过后来发现，切换Adapter就能完成了。</p>
<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>公司项目里有那么几个界面很是蛋疼，具体的表现就是新浪微博Android的个人主页那样：<br>     <img src="/image/2016-06-02-16-24-15-e1464858407614.jpg" alt=""></p>
<pre><code>`新浪微博效果`
</code></pre><p>1. 有个头部，显示了用户的一些资料<br>2. 有个 tab ，用来切换内容是什么<br>3. 实验发现，内容在滚动的时候(fling)，按 tab 是可以互切的，且切完以后，界面依然还在滚动</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol>
<li>通过 Dump View Hierarchy for UI Automator，我知道新浪微博的实现似乎只通过一个 <code>ListView</code>，先当它是一个 <code>ListView</code> 完成了这个界面的主体部分吧。</li>
<li>tag 在被滚动到顶的时候，会粘在顶部，效果大概就是网上各种 <code>StikyListView</code> 的效果，做两个 tag ,分别位于顶部的 tag1 和内容上方的 tag2，监视 tag2 的位置是否已经到达界面顶部，如果已经到顶了，则显示 tag1 而隐藏 tag2</li>
<li>只有一个 ListView，内容的切换就只好通过切换 Adapter 来实现了</li>
</ol>
<h3 id="动手"><a href="#动手" class="headerlink" title="动手"></a>动手</h3><h4 id="Stiky-的效果按着原思路很容易实现，tag2-和顶部的内容放在-HeadView-里给-ListView-就好了，至于说-tag2-的位置判断，也很简单："><a href="#Stiky-的效果按着原思路很容易实现，tag2-和顶部的内容放在-HeadView-里给-ListView-就好了，至于说-tag2-的位置判断，也很简单：" class="headerlink" title="Stiky 的效果按着原思路很容易实现，tag2 和顶部的内容放在 HeadView 里给 ListView 就好了，至于说 tag2 的位置判断，也很简单："></a>Stiky 的效果按着原思路很容易实现，tag2 和顶部的内容放在 HeadView 里给 <code>ListView</code> 就好了，至于说 tag2 的位置判断，也很简单：</h4><ol>
<li><p>添加 ListView 的 OnScrollListener，在 onScroll 方法中做监听，代码如下：</p>
<p>int[] screenLocation = new int[2];<br>// tab离屏幕的距离<br>tab2.getLocationOnScreen(screenLocation);<br>int tab2Top = screenLocation[1];<br>// ListView离屏幕顶的距离<br>listView.getLocationOnScreen(screenLocation);<br>int listViewTop = screenLocation[1];</p>
<p>// tab离ListView的距离<br>int tab2Distance = -(tab2Top - listViewTop);</p>
<p>if (tab2Distance &gt; 0 || listView.getFirstVisiblePosition() &gt; 0) {<br>// &gt; 0 说明滚动超过屏幕了</p>
<pre><code>tab.setVisibility(View.VISIBLE);
tab2.setVisibility(View.INVISIBLE);
</code></pre><p>} else {</p>
<pre><code>tab.setVisibility(View.INVISIBLE);
tab2.setVisibility(View.VISIBLE);
</code></pre><p>}<br>`</p>
</li>
<li><p>接下来就是处理 <code>Adapter</code> 了， 一开始，我写了三个 <code>Adapter</code> 来做切换，最后我蛋疼的发现这样是不行的，切换的时候， <code>ListView</code> 会滚动到顶部，我最多只能通过 <code>ListView.selectionFromTop(int,int)</code> 来恢复原先滚动的进度，整体体验还算过得去，但是不符合现在的需求，于是将三个 <code>Adapter</code> 合并成一切，切换数据而不改 <code>ListView</code> 的 <code>Adapter</code>，然后用 <code>notifyDataSetChanged()</code> 方法来更新数据</p>
<ul>
<li>我原先已经为数据写好了三个 <code>Adapter</code>，这里简化为一个</li>
</ul>
<pre>`static class MyAdapter extends BaseAdapter {

        List&lt;POJO&gt; data;
        LayoutInflater mInflater;
        DisplayImageOptions dio;

        MyAdapter(Context context, List&lt;POJO&gt; data) {
            mInflater = LayoutInflater.from(context);
            if (data != null) {
                this.data = data;
            } else {
                this.data = new ArrayList&lt;POJO&gt;();
            }
            dio = new DisplayImageOptions.Builder().cacheInMemory(true).displayer(new FadeInBitmapDisplayer(200)).build();
        }

        @Override
        public int getCount() {
            return data.size();
        }

        @Override
        public POJO getItem(int position) {
            return data.get(position);
        }

        @Override
        public long getItemId(int position) {
            return 0;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            ViewHolder holder;
            if (null == convertView) {
                convertView = mInflater.inflate(R.layout.item_listview, parent, false);
                holder = new ViewHolder(convertView);
                convertView.setTag(holder);
            } else {
                holder = (ViewHolder) convertView.getTag();
            }

            POJO pojo = getItem(position);
            holder.tv.setText(pojo.name);
            if (null != pojo.url &amp;&amp; null != holder.iv.getTag() &amp;&amp; pojo.url.equals(holder.iv.getTag())) {

            } else {
                ImageViewAware iva = new ImageViewAware(holder.iv, true);
                ImageLoader.getInstance().displayImage(pojo.url, iva, dio);
                holder.iv.setTag(pojo.url);
            }

            return convertView;
        }

    }
`</pre>

<pre>`static class ViewHolder {
        TextView tv;
        ImageView iv;

        ViewHolder(View v) {
            tv = (TextView) v.findViewById(R.id.tv);
            iv = (ImageView) v.findViewById(R.id.iv);
        }
    }
`</pre>
</li>
</ol>
<ul>
<li><p>上面说过，通过切换 Adapter 的话，感觉还不爽，于是合并成一个，这里也简单的合并了一下：</p>
<p><pre>`static class CompAdapter extends BaseAdapter {</pre></p>
<pre><code>    BaseAdapter realAdapter;
    int type;

    List&amp;lt;BaseAdapter&amp;gt; adapterList;
    CompAdapter() {
        adapterList = new ArrayList&amp;lt;BaseAdapter&amp;gt;();
    }

    public void addAdapter(BaseAdapter adapter) {
        this.adapterList.add(adapter);
    }

    public void setType(int type) {
        this.type = type;
        realAdapter = adapterList.get(type);
    }

    @Override
    public int getCount() {
        return null == realAdapter ? 0 : realAdapter.getCount();
    }

    @Override
    public Object getItem(int position) {
        return realAdapter.getItem(position);
    }

    @Override
    public long getItemId(int position) {
        return realAdapter.getItemId(position);
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {
        return realAdapter.getView(position, convertView, parent);
    }

    @Override
    public int getItemViewType(int position) {
        return type;
    }

    @Override
    public int getViewTypeCount() {
        return adapterList.size();
    }

}
</code></pre></li>
<li><p>现在，我用一个 <code>CompAdapter</code> 将三个 Adapter 简单的合并成一个了，<code>ListView</code> 当然是使用 <code>CompAdapter</code>了，按钮切换的时候，我就执行 <code>CompAdapter.setType(int)</code> 方法再执行  ·notifyDataSetChange()<code>方法，</code>Adapter` 的逻辑处理也就完成了，然后我们看一下效果：<br><img src="/image\2016-06-e6-b5-8b.gif" alt=""></p>
</li>
</ul>
<p>不考虑HeadView的ListView</p>
<p>嘿，任务算是完成了，很简单的方式去实现一下效果。</p>
<h3 id="Adapter方面的源码"><a href="#Adapter方面的源码" class="headerlink" title="Adapter方面的源码"></a>Adapter方面的源码</h3><p><a href="/raw/testlistview.rar">点我下载源码</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Fiddler抓Genymotion的包]]></title>
      <url>http://eraise.xyz/2016/03/23/fiddler-e6-8a-93genymotion-e7-9a-84-e5-8c-85/</url>
      <content type="html"><![CDATA[<h4 id="设置-Fiddler"><a href="#设置-Fiddler" class="headerlink" title="设置 Fiddler"></a>设置 Fiddler</h4><ul>
<li>Fiddler 首先需要做设置:允许远程连接</li>
</ul>
<ol>
<li>打开窗口 Tools -&gt; Fiddler Options</li>
<li>选择 Connections标签页</li>
<li>把 Allow remote computers to connection 勾上</li>
<li>点击确定</li>
</ol>
<h4 id="设置-Genymotion"><a href="#设置-Genymotion" class="headerlink" title="设置 Genymotion"></a>设置 Genymotion</h4><ul>
<li>设置 Genymotion 的 Wifi 的代理地址为 <span style="color: red;">10.0.3.2</span>，端口设置为 <span style="color: red">8888</span> 即可</li>
</ul>
<blockquote>
<p>手机要用 Fiddler 的抓包，和 Genymotion 一样需要设置代理，不过代理地址应该设置为局域网内PC的地址</p>
</blockquote>
<hr>
<h4 id="Fiddler-使用笔记"><a href="#Fiddler-使用笔记" class="headerlink" title="Fiddler 使用笔记"></a>Fiddler 使用笔记</h4><ul>
<li>Fiddler 可以在 <a href="http://www.telerik.com/" target="_blank" rel="external">官方网站</a>下载</li>
<li>Fiddler 文档 <a href="http://docs.telerik.com/fiddler/knowledgebase/quickexec" target="_blank" rel="external">点这里查看</a></li>
<li>Fiddler 支持断点</li>
</ul>
<ol>
<li>go 可以直接继续运行所有当前因为断点而暂停的请求</li>
<li>bpu + 网址 和 bpafter + 网址 分别在请求到达服务器前和请求到达终端(手机)前进行断点，如果不加网址，则会清除对应的断点</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[搭建自己的maven服务器给内部项目使用]]></title>
      <url>http://eraise.xyz/2016/02/01/e6-90-ad-e5-bb-ba-e8-87-aa-e5-b7-b1-e7-9a-84maven-e6-9c-8d-e5-8a-a1-e5-99-a8-e7-bb-99-e5-86-85-e9-83-a8-e9-a1-b9-e7-9b-ae-e4-bd-bf-e7-94-a8-md/</url>
      <content type="html"><![CDATA[<hr>
<h2 id="服务器搭建"><a href="#服务器搭建" class="headerlink" title="服务器搭建"></a>服务器搭建</h2><h3 id="maven-服务器安装：Nexus服务器"><a href="#maven-服务器安装：Nexus服务器" class="headerlink" title="maven 服务器安装：Nexus服务器"></a>maven 服务器安装：<a href="http://www.sonatype.org/nexus/go/" target="_blank" rel="external">Nexus服务器</a></h3><ol>
<li>下载后解压，并且配置到Path中，使cmd可以直接调用</li>
<li>cmd 调用 nexus install 进行安装后 nexus start启动，即可启动服务<blockquote>
<p>解压后有sonatype-work目录，没有将会自动生成，该目录作用是配置nexus</p>
</blockquote>
</li>
</ol>
<h3 id="nexus-配置："><a href="#nexus-配置：" class="headerlink" title="nexus 配置："></a>nexus 配置：</h3><ol>
<li>nexus 默认监听8081端口，进入nexus的配置网页是：  [ip地址]:8081/nexus，本机可以直接  localhost:8081/nexus 打开配置页面，默认的配置已经足够使用</li>
<li>nexus 配置需要登录，默认的登录账户是：<br><strong>账号：admin</strong><br><strong>密码：admin123</strong></li>
</ol>
<hr>
<h2 id="将自己的代码上传到仓库"><a href="#将自己的代码上传到仓库" class="headerlink" title="将自己的代码上传到仓库"></a>将自己的代码上传到仓库</h2><h3 id="上传代码至分为，需要配置项目的build-gradle，添加一个任务："><a href="#上传代码至分为，需要配置项目的build-gradle，添加一个任务：" class="headerlink" title="上传代码至分为，需要配置项目的build.gradle，添加一个任务："></a>上传代码至分为，需要配置项目的build.gradle，添加一个任务：</h3><pre><code>apply plugin: &apos;maven&apos;

def isReleaseBuild() {
    return VERSION_NAME.contains(&quot;SNAPSHOT&quot;) == false
}
def getRepositoryUsername() {
    return hasProperty(&apos;NEXUS_USERNAME&apos;) ? NEXUS_USERNAME : &quot;&quot;
}
def getRepositoryPassword() {
    return hasProperty(&apos;NEXUS_PASSWORD&apos;) ? NEXUS_PASSWORD : &quot;&quot;
}

afterEvaluate { project -&amp;gt;
    uploadArchives {
        repositories {
            mavenDeployer {
                pom.groupId = GROUP
                pom.artifactId = ARTIFACTID
                pom.version = VERSION
                repository(url: RELEASE_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
                snapshotRepository(url: SNAPSHOT_REPOSITORY_URL) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }
            }
        }
    }
    task androidJavadocs(type: Javadoc) {
        options.encoding = &quot;UTF-8&quot; 
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = &apos;javadoc&apos;
        from androidJavadocs.destinationDir
    }
    task androidSourcesJar(type: Jar) {
        classifier = &apos;sources&apos;
        from android.sourceSets.main.java.sourceFiles
    }
    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }
}
`&lt;/pre&gt;

&lt;font color=&quot;#FF0000&quot;&gt;options.encoding = &quot;UTF-8&quot; 指定了maven的编码，windows下如果不指定可能会导致 javadoc导出的时候出现错误&lt;/font&gt;

### 配置Gradle的参数，在gradle.properties添加代码&lt;/fontstyle &gt;

&lt;pre&gt;`GROUP=分组名
ARTIFACTID=项目名
VERSION=版本名称

SNAPSHOT_REPOSITORY_URL=http://localhost:8081/nexus/content/repositories/snapshots/
RELEASE_REPOSITORY_URL=http://localhost:8081/nexus/content/repositories/releases/

NEXUS_USERNAME=rksocket
NEXUS_PASSWORD=123456
`&lt;/pre&gt;

* * *

## 使用maven私服的库

### 添加库地址

&lt;pre&gt;`dependencies{
        repositories {
        maven {url &quot;http://localhost:8081/nexus/content/repositories/releases&quot;}
        maven {url &quot;http://localhost:8081/nexus/content/repositories/snapshots&quot;}
    }    
}
`&lt;/pre&gt;

### 引用库和普通的gradle库一样使用

&lt;pre&gt;`compile &apos;分组名:项目名:版本名称&apos;
</code></pre><h3 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h3><p><a href="http://blog.csdn.net/l2show/article/details/48653949" target="_blank" rel="external">Linux下部署Nexus服务器及在AS中的使用</a><br><a href="http://my.oschina.net/liangbo/blog/195739?fromerr=k9pnb4x9" target="_blank" rel="external">Windows下部署Nexus服务器</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Java&Android的加密解密]]></title>
      <url>http://eraise.xyz/2016/01/22/javaandroid-e7-9a-84-e5-8a-a0-e5-af-86-e8-a7-a3-e5-af-86/</url>
      <content type="html"><![CDATA[<p><strong>通过 RSA 加密解密，同理可以进行 MD5 和 SHA 值的计算，注意使用的包是 javax.crypto(加密解密)、java.security(密钥生成获取，MD5计算等)。<br>主要的类是 KeyPairGenerator、 KeyPair、 PublicKey、 PrivateKey、 KeyFactory、 Cipher等</strong></p>
<ul>
<li><p>以下为使用RSA进行的加密demo</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">/**************************************</span></div><div class="line">     * 生成密钥以供加密解密                                   *</div><div class="line">     **************************************/</div><div class="line">    <span class="comment">/* 密钥生成器 */</span></div><div class="line">    KeyPairGenerator generator = KeyPairGenerator.getInstance(“RSA”);</div><div class="line">    <span class="comment">/* 密钥对生成 */</span></div><div class="line">    KeyPair keyPair = generator.genKeyPair();</div><div class="line">    <span class="comment">/* 获取公钥 */</span></div><div class="line">    RSAPublicKey publicKey = (RSAPublicKey)keyPair.getPublic();</div><div class="line">    <span class="comment">/* 获取私钥 */</span></div><div class="line">    RSAPrivateKey privateKey = (RSAPrivateKey)keyPair.getPrivate();</div><div class="line">    <span class="comment">/* 获取密钥的 Modules 和 Exponent 值以供密钥还原 */</span></div><div class="line">    BigInteger publicModules = publicKey.getModulus();</div><div class="line">    BigInteger privateModules = privateKey.getModulus();</div><div class="line">    BigInteger publicExponent = publicKey.getPublicExponent();</div><div class="line">    BigInteger privateExponent = privateKey.getPrivateExponent();</div><div class="line">    System.out.println(“Public Modules == “ + publicModules);</div><div class="line">    System.out.println(“Private Modules == “ + privateModules);</div><div class="line">    System.out.println(“Public Exponent == “ + publicExponent);</div><div class="line">    System.out.println(“Private Exponent == “ + privateExponent);</div><div class="line">    <span class="comment">/**************************************</span></div><div class="line">     * 通过 modules 和 exponent 还原密钥          *</div><div class="line">     **************************************/</div><div class="line">    <span class="comment">/* 通过 Modules 和 Exponent 值生成 KeySpec */</span></div><div class="line">    RSAPublicKeySpec publicSpec = <span class="keyword">new</span> RSAPublicKeySpec(publicModules, publicExponent);</div><div class="line">    RSAPrivateKeySpec privateSpec = <span class="keyword">new</span> RSAPrivateKeySpec(privateModules, privateExponent);</div><div class="line">    <span class="comment">/* 通过 KeySpec还原密钥，还原工具是 KeyFactory */</span></div><div class="line">    KeyFactory keyFactory = KeyFactory.getInstance(“RSA”);</div><div class="line">    RSAPublicKey rPublicKey = <span class="keyword">null</span>;</div><div class="line">    RSAPrivateKey rPrivateKey = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        rPublicKey = (RSAPublicKey) keyFactory.generatePublic(publicSpec);</div><div class="line">        rPrivateKey = (RSAPrivateKey) keyFactory.generatePrivate(privateSpec);</div><div class="line">    &#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**************************************</span></div><div class="line">     * 通过密钥进行简单的加密解密测试                  *</div><div class="line">     * 加密解密使用Cipher类进行                           *</div><div class="line">     **************************************/</div><div class="line">    String secret = “这是一个秘密，不允许无关人士查看”;</div><div class="line">    <span class="keyword">byte</span>[] bSecret = secret.getBytes();</div><div class="line">    <span class="keyword">byte</span>[] dSecret = <span class="keyword">null</span>;</div><div class="line">    System.out.print(“加密前<span class="keyword">byte</span>数组：”);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : bSecret) &#123;</div><div class="line">        System.out.print(b);</div><div class="line">    &#125;</div><div class="line">    System.out.println();</div><div class="line">    System.out.println(“加密前： “ + <span class="keyword">new</span> String(bSecret));</div><div class="line">    <span class="comment">/* Cipher加密数据及还原数据 */</span></div><div class="line">    Cipher cipher = Cipher.getInstance(“RSA/ECB/PKCS1Padding”);</div><div class="line">    <span class="comment">/* 加密初始化，通过私钥加密，指定的参数决定了加密还是解密 */</span></div><div class="line">    cipher.init(Cipher.ENCRYPT_MODE, privateKey);</div><div class="line">    <span class="comment">/* 可以通过 doFinal 或 update 进行加解密，String太短使用update可能会失败，可以选择 onFinal */</span></div><div class="line">    dSecret = cipher.doFinal(bSecret);</div><div class="line">    System.out.print(“加密后<span class="keyword">byte</span>数组： “);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : dSecret) &#123;</div><div class="line">        System.out.print(b);</div><div class="line">    &#125;</div><div class="line">    System.out.println();</div><div class="line">    System.out.println(“加密后: “ + <span class="keyword">new</span> String(dSecret));</div><div class="line">    <span class="comment">/* 重新初始化进行解密，参数为DECRYPT_MODE */</span></div><div class="line">    cipher.init(Cipher.DECRYPT_MODE, publicKey);</div><div class="line">    dSecret = cipher.doFinal(dSecret);</div><div class="line">    System.out.print(“解密后<span class="keyword">byte</span>数组： “);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">byte</span> b : dSecret) &#123;</div><div class="line">        System.out.print(b);</div><div class="line">    &#125;</div><div class="line">    System.out.println();</div><div class="line">    System.out.println(“解密后: “ + <span class="keyword">new</span> String(dSecret));</div><div class="line">    <span class="comment">/**************************************</span></div><div class="line">     * 计算MD5值                                                      *</div><div class="line">     * 使用  MessageDigest计算                            *</div><div class="line">     **************************************/</div><div class="line">    <span class="comment">/* MessageDigest 计算 MD5 值，参数输入 SHA1 则是计算 SHA1 值，MD5为32位，SHA1为40位 */</span></div><div class="line">    MessageDigest digest = MessageDigest.getInstance(“MD5”);</div><div class="line">    <span class="comment">/* 计算 */</span></div><div class="line">    digest.update(bSecret);</div><div class="line">    <span class="comment">/* 取结果 */</span></div><div class="line">    dSecret = digest.digest();</div><div class="line">    <span class="comment">/* 处理数组，把byte数组转为16进制字符串 */</span></div><div class="line">    StringBuilder md5 = <span class="keyword">new</span> StringBuilder();</div><div class="line">    <span class="comment">/* 二进制转十六进制，先把二进制转成十进制，再从数组中取对应的char */</span></div><div class="line">    <span class="keyword">char</span>[] hexDigits = &#123;‘<span class="number">0</span>’, ‘<span class="number">1</span>’, ‘<span class="number">2</span>’, ‘<span class="number">3</span>’, ‘<span class="number">4</span>’, ‘<span class="number">5</span>’, ‘<span class="number">6</span>’, ‘<span class="number">7</span>’, ‘<span class="number">8</span>’, ‘<span class="number">9</span>’, ‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’&#125;;</div><div class="line">    <span class="keyword">byte</span> b;</div><div class="line">    <span class="keyword">char</span> hex;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dSecret.length; i ++) &#123;</div><div class="line">        b = dSecret[i];</div><div class="line">        <span class="comment">/*</span></div><div class="line">         * 取byte二进制的4位出来计算成16进制 ，</div><div class="line">         * 系统将二进制转10进制，再去从hexDigits中找出对应的16进制char就实现了二进制转16进制</div><div class="line">         * 0xf是16进制中的16，在二进制中是1111，byte和二进制的1111进行运算得到byte中低四位的二进制值</div><div class="line">         * 16位是取32位中间16位</div><div class="line">         */</div><div class="line">        hex = hexDigits[b &gt;&gt;&gt; <span class="number">4</span> &amp; <span class="number">0xf</span>];</div><div class="line">        md5.append(hex);</div><div class="line">        <span class="comment">/* 如果是32位md5字符串则需要以下 */</span></div><div class="line">        hex = hexDigits[b &amp; <span class="number">0xf</span>];</div><div class="line">        md5.append(hex);</div><div class="line">    &#125;</div><div class="line">    System.out.println(“<span class="number">32</span>位md5 == “ + md5);</div><div class="line">    System.out.println(“<span class="number">16</span>位md5 == “ + md5.substring(<span class="number">8</span>, <span class="number">24</span>));</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchPaddingException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IllegalBlockSizeException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (BadPaddingException e) &#123;</div><div class="line">    <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>AES进行文件加密：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/*****************</span></div><div class="line">   * AES数据加密    *</div><div class="line">   *****************/</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      String ab = “我只是要做一下测试而已，不至于 吧？”;</div><div class="line">      String file = “C:<span class="comment">//users/admin/Desktop/test”;</span></div><div class="line">      <span class="comment">/* 密钥生成器 */</span></div><div class="line">      KeyGenerator kg = KeyGenerator.getInstance(“AES”);</div><div class="line">      <span class="comment">/* 初始化密钥生成器，AES长度必须是128、256、512中的一个 */</span></div><div class="line">      kg.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(“<span class="number">12134</span>”.getBytes()));</div><div class="line">      <span class="comment">/* 生成密钥 */</span></div><div class="line">      SecretKey sk = kg.generateKey();</div><div class="line">      <span class="comment">/* 得到密钥的Spec */</span></div><div class="line">      <span class="comment">// SecretKeySpec sks = new SecretKeySpec(sk.getEncoded(), “AES”);</span></div><div class="line">      <span class="comment">/* 得到加密工具 Cipher，以 AES为算法 ，ECB为模式， PKCS5Padding为填充模式 */</span></div><div class="line">      Cipher cipher = Cipher.getInstance(“AES/ECB/PKCS5Padding”);</div><div class="line">      <span class="comment">/* 初始化加密工具 */</span></div><div class="line">      cipher.init(Cipher.ENCRYPT_MODE, sk);</div><div class="line">      <span class="comment">/* 文件流 */</span></div><div class="line">      FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</div><div class="line">      <span class="comment">/* 使用加密流包装文件流 */</span></div><div class="line">      CipherOutputStream cos = <span class="keyword">new</span> CipherOutputStream(fos, cipher);</div><div class="line">      <span class="comment">/* 写出数据 */</span></div><div class="line">      cos.write(ab.getBytes());</div><div class="line">      <span class="comment">/* 刷新流 */</span></div><div class="line">      cos.flush();</div><div class="line">      cos.close();</div><div class="line">      <span class="comment">/* 初始化加密工具为解密 */</span></div><div class="line">      cipher.init(Cipher.DECRYPT_MODE, sk);</div><div class="line">      <span class="comment">/* 文件输入流 */</span></div><div class="line">      FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</div><div class="line">      <span class="comment">/* 使用加密流包装文件输入流 */</span></div><div class="line">      CipherInputStream cis = <span class="keyword">new</span> CipherInputStream(fis, cipher);</div><div class="line">      <span class="comment">/* 读取文件数据，解密并且转为String */</span></div><div class="line">      <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">      <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">      ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</div><div class="line">      <span class="keyword">while</span>( (len = cis.read(buf)) != -<span class="number">1</span>) &#123;</div><div class="line">          baos.write(buf, <span class="number">0</span>, len);</div><div class="line">      &#125;</div><div class="line">      System.out.println(<span class="keyword">new</span> String(baos.toByteArray()));</div><div class="line">      cis.close();</div><div class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">      <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">      e.printStackTrace();</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义Spinner弹框的动画]]></title>
      <url>http://eraise.xyz/2015/12/30/e8-87-aa-e5-ae-9a-e4-b9-89spinner-e5-bc-b9-e6-a1-86-e7-9a-84-e5-8a-a8-e7-94-bb-2/</url>
      <content type="html"><![CDATA[<p>有人问了这样的问题，就试验看看了。<br>发现Spinner并没有提供这样的类似于 Activity.overridePendingTransition 这样自定义动画的方法，去瞅了眼源码，发现源码里，Spinner里的PopupWindow/Dialog都是内部定义的类，群里的朋友问的是PopupWindow展示的方式的，所以试验了PopupWindow的方案。<br>既然没有找到源码，那就只好寻找其他方案了，getPopupContext的API等级在23，不能通过这个来改变动画，于是考虑使用style设置默认的来做，但是popupwindow是在Spinner内部构建的，最后解决方案是在style中去写。</p>
<h5 id="先为PopupWindow准备了打开和关闭的两个动画xml："><a href="#先为PopupWindow准备了打开和关闭的两个动画xml：" class="headerlink" title="先为PopupWindow准备了打开和关闭的两个动画xml："></a>先为PopupWindow准备了打开和关闭的两个动画xml：</h5><ul>
<li><p>popup_enter.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scale</span></span></div><div class="line">        <span class="attr">android:fromXScale</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:toXScale</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:fromYScale</span>=<span class="string">"0.6"</span></div><div class="line">        <span class="attr">android:toYScale</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">android:pivotY</span>=<span class="string">"0%"</span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"1000"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">alpha</span> <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/decelerate_interpolator"</span></span></div><div class="line">        <span class="attr">android:fromAlpha</span>=<span class="string">"0.0"</span></div><div class="line">        <span class="attr">android:toAlpha</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"1000"</span></div><div class="line">        /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>popup_exit.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">set</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scale</span></span></div><div class="line">        <span class="attr">android:fromXScale</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:toXScale</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:fromYScale</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:toYScale</span>=<span class="string">"0.5"</span></div><div class="line">        <span class="attr">android:pivotX</span>=<span class="string">"50%"</span></div><div class="line">        <span class="attr">android:pivotY</span>=<span class="string">"0%"</span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"500"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">alpha</span></span></div><div class="line">        <span class="attr">android:interpolator</span>=<span class="string">"@android:anim/accelerate_interpolator"</span></div><div class="line">        <span class="attr">android:fromAlpha</span>=<span class="string">"1.0"</span></div><div class="line">        <span class="attr">android:toAlpha</span>=<span class="string">"0.0"</span></div><div class="line">        <span class="attr">android:duration</span>=<span class="string">"500"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="style中添加一下PopupWindow要使用的样式"><a href="#style中添加一下PopupWindow要使用的样式" class="headerlink" title="style中添加一下PopupWindow要使用的样式:"></a>style中添加一下PopupWindow要使用的样式:</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"CustomPopupTheme"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:popupAnimationStyle"</span>&gt;</span>@style/PopupAnimation<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"PopupAnimation"</span> <span class="attr">parent</span>=<span class="string">"android:Animation"</span> <span class="attr">mce_bogus</span>=<span class="string">"1"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowEnterAnimation"</span>&gt;</span>@anim/popup_enter<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowExitAnimation"</span>&gt;</span>@anim/popup_exit<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h5 id="在Spinner控件里去使用它："><a href="#在Spinner控件里去使用它：" class="headerlink" title="在Spinner控件里去使用它："></a>在Spinner控件里去使用它：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Spinner</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/spinner"</span></div><div class="line">    <span class="attr">style</span>=<span class="string">"@style/CustomPopupTheme"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:spinnerMode</span>=<span class="string">"dropdown"</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
<h5 id="然后就搞定了，效果："><a href="#然后就搞定了，效果：" class="headerlink" title="然后就搞定了，效果："></a>然后就搞定了，效果：</h5><p><img src="/image/a4c25fdd22454bf525d26ed4c057cf85_Video_2015-12-30_131550.gif" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[windows CMD窗命令]]></title>
      <url>http://eraise.xyz/2015/12/25/windows-cmd-e7-aa-97-e5-91-bd-e4-bb-a4/</url>
      <content type="html"><![CDATA[<ul>
<li>stikynot win7自带的便笺</li>
<li>journal 可以直接打开win7的日记本(不是记事本)</li>
<li>tabtip 可以打开一个“鼠标手写板”，可以用来写字，而且识别效果不错</li>
<li>snippingtool 一个自带的截图工具，完成后可以直接在画板里打开</li>
<li>write （writepad） 手写板，与word差不多，可以保存成 .docx 文档！</li>
<li>robocopy 多线程拷贝，命令比较复杂，到 cmd 去执行吧，-mt::线程数 设置线程数 -s 复制子目录不包括空目录 -e 复制子目录包括空目录 -mir则是保留文件夹树</li>
<li>mspaint 画板</li>
</ul>
<p><code>netstat -aon|findstr 5037 // 查看当前的端口占用（findStr跟linux 的 grep差不多，5037是adb）
tasklist|findstr 5037 // tasklist 就是任务列表
taskkill /f /t /im adb.exe // 强制终止任务， /f是强制 /t 是任务进程及其子进程 /im 是映像等</code></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hosts]]></title>
      <url>http://eraise.xyz/2015/12/22/hosts/</url>
      <content type="html"><![CDATA[<p>总有些网站特别难上去，也许是GFW，也许是DNS堵塞。通常的番羽墙我用自己的ss，不过有的时候，改下hosts就能稳定的上了(比如我用长城宽带，DNS太不给力了，github上不去)，那么，hosts设置一下加快网页打开的速度吧。</p>
<p>在ping.pe或<a href="http://ping.chinaz.com/来找到对应的IP，然后添加到" target="_blank" rel="external">http://ping.chinaz.com/来找到对应的IP，然后添加到</a> C:\Windows\System32\drivers\etc\hosts</p>
<blockquote>
<p>185.31.16.184 github.global.ssl.fastly.net</p>
<p>192.30.252.130 github.com.</p>
<p>192.30.252.141 gist.github.com<br>推荐个会更新Google hosts的博客：<a href="http://laod.cn/hosts/2015-google-hosts.html" target="_blank" rel="external">http://laod.cn/hosts/2015-google-hosts.html</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通过现有的Type或者泛型获取到一个List封装起来的新Type]]></title>
      <url>http://eraise.xyz/2015/12/14/e9-80-9a-e8-bf-87-e7-8e-b0-e6-9c-89-e7-9a-84type-e6-88-96-e8-80-85-e6-b3-9b-e5-9e-8b-e8-8e-b7-e5-8f-96-e5-88-b0-e4-b8-80-e4-b8-aalist-e5-b0-81-e8-a3-85-e8-b5-b7-e6-9d-a5-e7-9a-84-e6-96-b0type-2/</url>
      <content type="html"><![CDATA[<p>在Bean里写getListType()累了，终于发现有方法取代了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过泛型获取到泛型对应的  List 列表的Type，以便Gson可以解析</div><div class="line"> * <span class="doctag">@param</span> subclass class xxx&lt;T&gt; 里面的这个xxx.getClass()</div><div class="line"> * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">getListTypeFromGeneric</span><span class="params">(Class&lt;?&gt; subclass)</span> </span>&#123;</div><div class="line">   <span class="comment">// 获取类对应的类型，比如说在RecyclerViewFragment&lt;DuiTangInfo&gt;，则将得到RecyclerViewFragment&lt;DuiTangInfo&gt;</span></div><div class="line">   Type superclass = subclass.getGenericSuperclass();</div><div class="line">   <span class="keyword">if</span> (superclass <span class="keyword">instanceof</span> Class) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Missing type parameter."</span>);</div><div class="line">   &#125;</div><div class="line">   ParameterizedType parameter = (ParameterizedType) superclass;</div><div class="line">   <span class="comment">// 取得泛型类型对应的类型，即得到 DuiTangInfo 最后对应的类型</span></div><div class="line">   Type _type = $Gson$Types.canonicalize(parameter.getActualTypeArguments()[<span class="number">0</span>]);</div><div class="line">   <span class="comment">// 生成被 List 所包含的 Type</span></div><div class="line">   <span class="keyword">return</span> $Gson$Types.newParameterizedTypeWithOwner(<span class="keyword">null</span>, List.class, _type);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 通过已有的 &#123;<span class="doctag">@link</span> Type&#125; 获取到泛型对应的  List 列表的Type，以便Gson可以解析</div><div class="line"> * <span class="doctag">@param</span> type</div><div class="line"> * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Type <span class="title">getListTypeFromType</span><span class="params">(Type type)</span> </span>&#123;</div><div class="line">   <span class="keyword">return</span> $Gson$Types.newParameterizedTypeWithOwner(<span class="keyword">null</span>, List.class, type);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p>
<div>参考资料:  <a href="https://github.com/ZhaoKaiQiang/OkHttpPlus/blob/master/library/src/main/java/com/socks/okhttp/plus/parser/OkBaseJsonParser.java" target="_blank" rel="external">https://github.com/ZhaoKaiQiang/OkHttpPlus/blob/master/library/src/main/java/com/socks/okhttp/plus/parser/OkBaseJsonParser.java</a></div><br><div><span style="font-family: 微软雅黑;">                 <a href="https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/%24Gson%24Types.java" target="_blank" rel="external">https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/%24Gson%24Types.java</a> </span></div>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Junit 测试Android]]></title>
      <url>http://eraise.xyz/2015/12/03/junit-e6-b5-8b-e8-af-95android/</url>
      <content type="html"><![CDATA[<p><del>Junit(单元测试)，好吧，我看啊看我依然不明白它有什么作用。只是对于单一的方法或许可以一测吧。</del></p>
<p><strong>每个JUnit测试都可以包含：测试前环境配置  –&gt; 测试用例 –&gt; 测试后资源重置。</strong></p>
<p>在看Android之前的，就先看看Java的吧，Java的比较简单，使用的是JUnit 4做的测试，在使用Eclipse的时候可以自动添加JUnit 4环境。</p>
<p>Java的JUnit测试主要就是使用注解 @Test 注解一个方法表明该方法是一个测试用例，用 @After 注解来对 @Test 方法运行完进行后续处理， @Befor 注解对 @Test 方法运行前进行预先的配置处理，不需要西继承什么类了。Java在Eclipse中在运行的时候选择JUnit就可以进行JUnit测试了。在视图里可以找到”JUnit”来查看结果。</p>
<ol>
<li><p>先创建一个被测试的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JunitTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> arg1 + arg2;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> arg1 – arg2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTestCase</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> arg1 = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> arg2 = <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> r1 = <span class="number">13</span>;</div><div class="line">    <span class="keyword">int</span> r2 = <span class="number">7</span>;</div><div class="line">    JunitTest jt = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每个测试用例被调用前调用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        jt = <span class="keyword">new</span> JunitTest();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试用例</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertTrue(“That is”, jt.add(arg1, arg2) == r1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试用例</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</div><div class="line">        assertTrue(“sub is”, jt.sub(arg1, arg2) == r2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每个测试用例被调用后调用</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(“Test finish”);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<p>Android在SDK1.5后提供了JUnit测试，Android的 JUnit 测试需要继承 TestCase 类，并且需要在ManiFest.xml中进行配置，可以写一个类，内部包含一个 <code>public static Test suite(){}</code> 方法来管理测试用例类。Android的JUnit可以是没有界面的(JUnit隐藏掉界面)，不过像下面这样的例子，跟Java基本上就是一致的，这也是最简单的用例。Android与JUnit的结合核心或许是在 <code>BaseTestRunner</code> 类和 <code>AndroidTestRunner</code> 类(junit.runner包)。默认的安卓会有一个<code>BaseTestRunner</code>来帮助我们运行代码，我们也可以通过自己去实例化一个<code>AndroidTestRunner</code>和实现自己的<code>TestListener</code>来做测试。</p>
<p><strong>在Android里，可以用 Dev Tools(AVD中的APP) –&gt; Instrumentation –&gt; instrumentation结点中的 label 来测试</strong></p>
<blockquote>
<p>Android的JUnit集成在内部，所以可以在API文档中查到相关的包、类等。Android中的JUnit包括如下的包：</p>
</blockquote>
<table>
<thead>
<tr>
<th>SDK</th>
<th>功能说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>junit.framework</code></td>
<td>JUnit测试框架</td>
</tr>
<tr>
<td><code>junit.runner</code></td>
<td>实用工具类支持JUnit测试框架</td>
</tr>
<tr>
<td><code>android.test</code></td>
<td>Android 对JUnit测试框架的扩展包</td>
</tr>
<tr>
<td><code>android.test.mock</code></td>
<td>Android的一些辅助类</td>
</tr>
<tr>
<td><code>android.test.suitebuilder</code></td>
<td>实用工具类，支持类的测试运行</td>
</tr>
</tbody>
</table>
<ol>
<li><p>Manifest.xml要在 application 后面添加 instrumentation 结点，在 application 里添加 user-library， 配置是通用的。</p>
<ul>
<li><p>instrumentation 结点内容是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">instrumentation</span></span></div><div class="line">    <span class="attr">android:name</span>=<span class="string">“android.test.InstrumentationTestRunner”</span></div><div class="line">    <span class="attr">android:targetPackage</span>=<span class="string">“com.eraise.androidjunittest”</span></div><div class="line">    /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>user-library 结点的内容是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-library</span> <span class="attr">android:name</span>=<span class="string">“android.test.runner”</span> /&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>Manifest 修改完后长这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=“1.0” encoding=“utf-8”?&gt;</div><div class="line"> &lt;manifest xmlns:android=“http://schemas.android.com/apk/res/android”</div><div class="line"> package=“com.eraise.androidjunittest”</div><div class="line"> android:versionCode=“1”</div><div class="line"> android:versionName=“1.0” &gt;</div><div class="line"> &lt;uses-sdk</div><div class="line">     android:minSdkVersion=“8”</div><div class="line">     android:targetSdkVersion=“18” /&gt;</div><div class="line"> &lt;application</div><div class="line">     android:allowBackup=“true”</div><div class="line">     android:icon=“@drawable/ic_launcher”</div><div class="line">     android:label=“@string/app_name”</div><div class="line">     android:theme=“@style/AppTheme” &gt;</div><div class="line">     &lt;activity</div><div class="line">         android:name=“com.eraise.androidjunittest.JunitTestActivity”</div><div class="line">         android:label=“@string/app_name” &gt;</div><div class="line">         &lt;intent-filter&gt;</div><div class="line">             &lt;action android:name=“android.intent.action.MAIN” /&gt;</div><div class="line">             &lt;category android:name=“android.intent.category.LAUNCHER” /&gt;</div><div class="line">         &lt;/intent-filter&gt;</div><div class="line">     &lt;/activity&gt;</div><div class="line">     &lt;uses-library android:name=“android.test.runner” /&gt;</div><div class="line"> &lt;/application&gt;</div><div class="line"></div><div class="line"> &lt;instrumentation</div><div class="line">     android:name=“android.test.InstrumentationTestRunner”</div><div class="line">     android:targetPackage=“com.eraise.androidjunittest” &lt;!– 指定要测试的包 –&gt;</div><div class="line">     android:label=“com.eraise.AndroidJUnitTest”</div><div class="line">     /&gt;</div><div class="line"></div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>测试的对象跟Java一样，先写一个被测试的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleCalcutor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> arg1 + arg2;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> arg1 – arg2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试类继承于 TestCase，其中的 setUp() 方法在测试样例被调用前调用，可用于环境配置， tearDown() 方法在测试样例调用结束后调用，可用于资源回收， 测试样例只需要是以 test 开头就可以被检查出来(相应的也就是说，test开头的方法都将被当成测试用例)：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJUnitTest</span> <span class="keyword">extends</span> <span class="title">TestCase</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> arg1 = <span class="number">10</span>;</div><div class="line">    <span class="keyword">int</span> arg2 = <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> r1 = <span class="number">13</span>;</div><div class="line">    <span class="keyword">int</span> r2 = <span class="number">7</span>;</div><div class="line">    SampleCalcutor sc = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每个测试样例调用前调用，可以用于环境配置</div><div class="line">     */</div><div class="line">     <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.setUp();</div><div class="line">        sc = <span class="keyword">new</span> SampleCalcutor();</div><div class="line">        System.out.println(“测试前”);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每个测试样例结束后调用，可以用于资源的回收</div><div class="line">     */</div><div class="line">     <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">super</span>.tearDown();</div><div class="line">        System.out.println(“测试完”);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试用例1</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = sc.add(arg1, arg2);</div><div class="line">        assertTrue(“add result is “, result == r1);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试用例2</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSub</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result = sc.sub(arg1, arg2);</div><div class="line">        assertTrue(“subtract result is “, result == r2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>以上已经可以运行了，通过右键项目 — Run As –&gt; Android JUnit Test， 不过这样如果有多个 TestCase ，就都会被运行出来，所以我们可以用一个拥有 public static Test suite(){} 的类来运行，使用 TestSuite 管理 TestSuite.addTestSuite() 添加需要测试的用例类：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAll</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 管理测试用例，直接在TestAll右键以Android JUnit方式运行</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Test <span class="title">suite</span><span class="params">()</span> </span>&#123;</div><div class="line">        TestSuite suite = <span class="keyword">new</span> TestSuite();</div><div class="line">        suite.addTestSuite(MyJUnitTest.class); <span class="comment">// 测试用例 class</span></div><div class="line">        <span class="keyword">return</span> suite;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div>参考资料：<a href="http://sns.testin.cn/thread-1529-1-1.html" target="_blank" rel="external">http://sns.testin.cn/thread-1529-1-1.html</a></div><br><div>AndroidStudio：<a href="http://www.jianshu.com/p/03118c11c199" target="_blank" rel="external">http://www.jianshu.com/p/03118c11c199</a></div><br><div></div><br><div>附件(doc)：</div><br><div><a href="http://www.eraise.xyz/wp-content/uploads/2015/12/Android、JUnit深入浅出.doc" target="_blank" rel="external">Android、JUnit深入浅出</a></div>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于我常用框架的ProGuard混淆]]></title>
      <url>http://eraise.xyz/2015/12/02/e5-85-b3-e4-ba-8e-e6-88-91-e5-b8-b8-e7-94-a8-e6-a1-86-e6-9e-b6-e7-9a-84proguard-e6-b7-b7-e6-b7-86/</url>
      <content type="html"><![CDATA[<p>以前完全不懂得怎么混淆啊，一直感觉是很高端的技术，不过事实上就那样了，嗯，有的时候真拿那些奇怪的东西没办法，比如log4j，那就忽略吧！<span style="color: rgb(204, 120, 50); font-weight: bold; background-color: rgb(43, 43, 43); font-family: 宋体; font-size: 9pt; line-height: 1.5;">-ignorewarnings</span><div><br></div><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:9.0pt;"><br><span style="color:#808080;">##—————Begin: proguard configuration common for all Android apps ———-<br></span><span style="color:#cc7832;font-weight:bold;">-optimizationpasses </span>5<br><span style="color:#cc7832;font-weight:bold;">-dontusemixedcaseclassnames<br></span><span style="color:#cc7832;font-weight:bold;">-dontskipnonpubliclibraryclasses<br></span><span style="color:#cc7832;font-weight:bold;">-dontskipnonpubliclibraryclassmembers<br></span><span style="color:#cc7832;font-weight:bold;">-dontpreverify<br></span><span style="color:#cc7832;font-weight:bold;">-verbose<br></span><span style="color:#cc7832;font-weight:bold;">-dump </span>class_files.txt<br><span style="color:#cc7832;font-weight:bold;">-printseeds </span>seeds.txt<br><span style="color:#cc7832;font-weight:bold;">-printusage </span>unused.txt<br><span style="color:#cc7832;font-weight:bold;">-printmapping </span>mapping.txt<br><span style="color:#cc7832;font-weight:bold;">-optimizations </span>!code/simplification/arithmetic,!field/<em>,!class/merging/</em></pre></div></p>
<p><span style="color:#cc7832;font-weight:bold;">-allowaccessmodification<br></span><span style="color:#cc7832;font-weight:bold;">-keepattributes </span><em>Annotation</em><br><span style="color:#cc7832;font-weight:bold;">-renamesourcefileattribute </span>SourceFile<br><span style="color:#cc7832;font-weight:bold;">-keepattributes </span>SourceFile,LineNumberTable<br><span style="color:#cc7832;font-weight:bold;">-repackageclasses </span>‘’</p>
<p><span style="color:#cc7832;font-weight:bold;">-keep </span>public class <em> extends android.app.Activity<br><span style="color:#cc7832;font-weight:bold;">-keep </span>public class </em> extends android.app.Application<br><span style="color:#cc7832;font-weight:bold;">-keep </span>public class <em> extends android.app.Service<br><span style="color:#cc7832;font-weight:bold;">-keep </span>public class </em> extends android.content.BroadcastReceiver<br><span style="color:#cc7832;font-weight:bold;">-keep </span>public class <em> extends android.content.ContentProvider<br><span style="color:#cc7832;font-weight:bold;">-keep </span>public class </em> extends android.app.backup.BackupAgentHelper<br><span style="color:#cc7832;font-weight:bold;">-keep </span>public class * extends android.preference.Preference<br><span style="color:#cc7832;font-weight:bold;">-keep </span>public class com.android.vending.licensing.ILicensingService<br><span style="color:#cc7832;font-weight:bold;">-dontnote </span>com.android.vending.licensing.ILicensingService</p>
<p><span style="color:#808080;"># Explicitly preserve all serialization members. The Serializable interface<br></span><span style="color:#808080;"># is only a marker interface, so it wouldn’t save them.<br></span><span style="color:#cc7832;font-weight:bold;">-keepclassmembers </span>class * implements java.io.Serializable {<br><span style="color:#9876aa;">    static final long serialVersionUID;<br></span><span style="color:#9876aa;">    private static final java.io.ObjectStreamField[] serialPersistentFields;<br></span><span style="color:#9876aa;">    private void writeObject(java.io.ObjectOutputStream);<br></span><span style="color:#9876aa;">    private void readObject(java.io.ObjectInputStream);<br></span><span style="color:#9876aa;">    java.lang.Object writeReplace();<br></span><span style="color:#9876aa;">    java.lang.Object readResolve();<br></span>}</p>
<p><span style="color:#808080;"># Preserve all native method names and the names of their classes.<br></span><span style="color:#cc7832;font-weight:bold;">-keepclasseswithmembernames </span>class * {<br><span style="color:#9876aa;">    native &lt;methods&gt;;<br></span>}</p>
<p><span style="color:#cc7832;font-weight:bold;">-keepclasseswithmembernames </span>class * {<br><span style="color:#9876aa;">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);<br></span>}</p>
<p><span style="color:#cc7832;font-weight:bold;">-keepclasseswithmembernames </span>class * {<br><span style="color:#9876aa;">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);<br></span>}</p>
<p><span style="color:#808080;"># Preserve static fields of inner classes of R classes that might be accessed<br></span><span style="color:#808080;"># through introspection.<br></span><span style="color:#cc7832;font-weight:bold;">-keepclassmembers </span>class <em>*.R$</em> {<br><span style="color:#9876aa;">  public static &lt;fields&gt;;<br></span>}</p>
<p><span style="color:#808080;"># Preserve the special static methods that are required in all enumeration classes.<br></span><span style="color:#cc7832;font-weight:bold;">-keepclassmembers </span>enum <em> {<br><span style="color:#9876aa;">    public static <em>*[] values();<br></em></span><span style="color:#9876aa;">    public static </span></em> valueOf(java.lang.String);<br>}</p>
<p><span style="color:#cc7832;font-weight:bold;">-keep </span>public class <em> {<br><span style="color:#9876aa;">    public protected </span></em>;<br>}</p>
<p><span style="color:#cc7832;font-weight:bold;">-keep </span>class <em> implements android.os.Parcelable {<br><span style="color:#9876aa;">  public static final android.os.Parcelable$Creator </span></em>;<br>}<br><span style="color:#808080;">##—————End: proguard configuration common for all Android apps ———-</span><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:9.0pt;"><br><span style="color:#808080;">##———– RxJava ——–<br></span><span style="color:#cc7832;font-weight:bold;">-keep </span>class rx.schedulers.Schedulers {<br><span style="color:#9876aa;">    public static &lt;methods&gt;;<br></span>}<br><span style="color:#cc7832;font-weight:bold;">-keep </span>class rx.schedulers.ImmediateScheduler {<br><span style="color:#9876aa;">    public &lt;methods&gt;;<br></span>}<br><span style="color:#cc7832;font-weight:bold;">-keep </span>class rx.schedulers.TestScheduler {<br><span style="color:#9876aa;">    public &lt;methods&gt;;<br></span>}<br><span style="color:#cc7832;font-weight:bold;">-keep </span>class rx.schedulers.Schedulers {<br><span style="color:#9876aa;">    public static ** test();<br></span>}</pre></div></p>
<p><span style="color:#cc7832;font-weight:bold;">-keepclassmembers </span>class rx.internal.util.unsafe.<em>ArrayQueue</em>Field* {<br><span style="color:#9876aa;">    long producerIndex;<br></span><span style="color:#9876aa;">    long consumerIndex;<br></span>}</p>
<p><span style="color:#cc7832;font-weight:bold;">-keepclassmembers </span>class rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef {<br><span style="color:#9876aa;">    long producerNode;<br></span><span style="color:#9876aa;">    long consumerNode;<br></span>}<br><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:9.0pt;"><br><span style="color:#808080;">##—————Begin: proguard configuration for Gson  ———-<br></span><span style="color:#808080;"># Gson uses generic type information stored in a class file when working with fields. Proguard<br></span><span style="color:#808080;"># removes such information by default, so configure it to keep all of it.<br></span><span style="color:#cc7832;font-weight:bold;">-keepattributes </span>Signature</pre></div></p>
<p><span style="color:#808080;"># For using GSON @Expose annotation<br></span><span style="color:#cc7832;font-weight:bold;">-keepattributes </span><em>Annotation</em></p>
<p><span style="color:#808080;"># Gson specific classes<br></span><span style="color:#cc7832;font-weight:bold;">-keep </span>class sun.misc.Unsafe {<span style="color:#9876aa;"> <em>; </em></span>}<br><span style="color:#808080;">#-keep class com.google.gson.stream.** { ; }<br></span><span style="color:#808080;"><br></span><span style="color:#808080;"># Application classes that will be serialized/deserialized over Gson<br></span><span style="color:#cc7832;font-weight:bold;">-keep </span>class com.google.gson.examples.android.model.<em>* {<span style="color:#9876aa;"> </span></em>; }</p>
<p><span style="color:#cc7832;font-weight:bold;">-keep </span>class <strong>.pojo.</strong> {<span style="color:#9876aa;"><em>;</em></span>}<br><div><pre style="background-color:#2b2b2b;color:#a9b7c6;font-family:'宋体';font-size:9.0pt;"><span style="color:#808080;">##——– ButterKnife ———<br></span><span style="color:#cc7832;font-weight:bold;">-keep </span>class butterknife.** {<span style="color:#9876aa;"> ; </span>}<br><span style="color:#cc7832;font-weight:bold;">-dontwarn </span>butterknife.internal.<strong><br><span style="color:#cc7832;font-weight:bold;">-keep </span>class </strong>$$ViewBinder {<span style="color:#9876aa;"> *; </span>}</pre></div></p>
<p><span style="color:#cc7832;font-weight:bold;">-keepclasseswithmembernames </span>class <em> {<br><span style="color:#9876aa;">    @butterknife.</span></em> &lt;fields&gt;;<br>}</p>
<p><span style="color:#cc7832;font-weight:bold;">-keepclasseswithmembernames </span>class <em> {<br><span style="color:#9876aa;">    @butterknife.</span></em> &lt;methods&gt;;<br>}<div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 4.4 (SDK_INT >= 19) 以后，状态栏的透明]]></title>
      <url>http://eraise.xyz/2015/10/28/android-4-4-sdk-int-19-e4-bb-a5-e5-90-8e-ef-bc-8c-e7-8a-b6-e6-80-81-e6-a0-8f-e7-9a-84-e9-80-8f-e6-98-8e/</url>
      <content type="html"><![CDATA[<script id="wiz_editor_localize" src="D:\Program Files (x86)\WizNote\WizTools\htmleditor\localize.js?t=1446037758905" type="text/javascript" charset="utf-8"></script><script id="wizEditor" src="D:\Program Files (x86)\WizNote\WizTools\htmleditor\plugins\wizEditor.js?t=1446037758911" type="text/javascript" charset="utf-8"></script><script id="wizEditorHelper" src="D:\Program Files (x86)\WizNote\WizTools\htmleditor\plugins\editor_helper.js?t=1446037758935" type="text/javascript" charset="utf-8"></script>

<p>4.4以后才支持的沉浸式<span style="color: #ff0000;">ActionBar+StatusBar</span>。</p>
<p><div>在Java代码中，可以通过</div></p>
<p><div></div></p>
<p><div><!--WizRtf2Html Charset=0 --><span style="font-size: 10pt; color: #bed6ff; font-family: 微软雅黑; background-color: #000000;">getWindow<span style="color: #d8d8d8;">().<span style="color: #ffffff;">setFlags</span>(<span style="text-decoration: underline; color: #d197d9;">WindowManager<span style="color: #d8d8d8;">.<span style="color: #d25252;">LayoutParams</span>.<span style="font-style: italic; color: #efc090;">FLAG_TRANSLUCENT_STATUS</span></span></span> | </span></span></div></p>
<p><div><span style="font-size: 10pt; color: #bed6ff; font-family: 微软雅黑; background-color: #000000;"><span style="color: #d8d8d8;"><span style="text-decoration: underline; color: #d197d9;">                                     WindowManager<span style="color: #d8d8d8;">.<span style="color: #d25252;">LayoutParams</span>.<span style="font-style: italic; color: #efc090;">FLAG_TRANSLUCENT_NAVIGATION</span></span></span>,</span></span></div><br><span style="background-color: #000000;"><span style="font-size: 10pt; color: #d8d8d8; font-family: '微软雅黑';">                        <span style="text-decoration: underline; color: #d197d9;">WindowManager<span style="color: #d8d8d8;">.<span style="color: #d25252;">LayoutParams</span>.<span style="font-style: italic; color: #efc090;">FLAG_TRANSLUCENT_NAVIGATION</span></span></span> |</span></span><span style="background-color: #000000;"><span style="font-size: 10pt; color: #d8d8d8; font-family: '微软雅黑';">                                                         <span style="text-decoration: underline; color: #d197d9;">WindowManager<span style="color: #d8d8d8;">.<span style="color: #d25252;">LayoutParams</span>.<span style="font-style: italic; color: #efc090;">FLAG_TRANSLUCENT_STATUS</span></span></span>);</span> </span></p>
<p></p>
<p><div>进行设置，另外还有一种方法，效果和这个不一样，它是全屏的，状态栏透明且可以下滑：</div></p>
<p><div></div></p>
<p><div><!--WizRtf2Html Charset=0 --><span style="text-decoration: underline; font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">mDecorView<span style="text-decoration: none;">.setSystemUiVisibility(</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #d25252;">View</span>.<span style="font-style: italic; color: #efc090;">SYSTEM_UI_FLAG_LAYOUT_STABLE</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                | <span style="color: #d25252;">View</span>.<span style="font-style: italic; color: #efc090;">SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                | <span style="color: #d25252;">View</span>.<span style="font-style: italic; color: #efc090;">SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                | <span style="color: #d25252;">View</span>.<span style="font-style: italic; color: #efc090;">SYSTEM_UI_FLAG_HIDE_NAVIGATION</span> <span style="color: #c7dd0c;">// hide <span style="text-decoration: underline;">nav</span> bar</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                | <span style="color: #d25252;">View</span>.<span style="font-style: italic; color: #efc090;">SYSTEM_UI_FLAG_FULLSCREEN</span> <span style="color: #c7dd0c;">// hide status bar</span></span></div><br><span style="background-color: #000000;"><span style="font-size: 10pt; color: #d8d8d8; font-family: '微软雅黑';">                | <span style="color: #d25252;">View</span>.<span style="font-style: italic; color: #efc090;">SYSTEM_UI_FLAG_IMMERSIVE</span>);</span>  </span></p>
<p></p>
<p><div>在 <span style="color: #0000ff;">xml style </span>中的设置方式：</div></p>
<p><div></div></p>
<p><div><!--WizRtf2Html Charset=0 --><span style="font-size: 10pt; color: #79abff; font-family: 微软雅黑; background-color: #000000;">&lt;<span style="color: #bed6ff;">item<span style="color: windowtext;"> </span>name<span style="color: #d8d8d8;">=<span style="color: #ffc600;">“android:windowTranslucentStatus”</span></span></span>&gt;<span style="color: #d8d8d8;">true</span>&lt;/<span style="color: #bed6ff;">item</span>&gt;</span></div><br><span style="background-color: #000000;"><span style="font-size: 10pt; color: #d8d8d8; font-family: '微软雅黑';"><span style="color: #79abff;">&lt;<span style="color: #bed6ff;">item<span style="color: windowtext;"> </span>name</span></span>=<span style="color: #ffc600;">“android:windowTranslucentNavigation”<span style="color: #79abff;">&gt;</span></span>true<span style="color: #79abff;">&lt;/<span style="color: #bed6ff;">item</span>&gt;</span></span>  </span></p>
<p></p>
<p><div>不过在 <span style="color: #0000ff;">xml </span>中，不知道出于什么原因，我继承 AppTheme 后，给一个<span style="color: #0000ff;">Activity</span>(不是<span style="color: #0000ff;">Application</span>) 设置了这个<span style="color: #0000ff;">style</span>，结果无效。</div></p>
<p><div>在5.0中，可以设置标题栏颜色：</div></p>
<p><div></div></p>
<p><div><!--WizRtf2Html Charset=0 --><span style="font-size: 10pt; color: #79abff; font-family: 微软雅黑; background-color: #000000;">&lt;<span style="color: #bed6ff;">item<span style="color: windowtext;"> </span>name<span style="color: #d8d8d8;">=<span style="color: #ffc600;">“android:colorPrimary”</span></span></span>&gt;<span style="color: #d8d8d8;">?attr/bg_title_color</span>&lt;/<span style="color: #bed6ff;">item</span>&gt; </span><span style="font-size: 10pt; font-family: 微软雅黑; background-color: #000000;"><span style="color: #3cb371;">// ActionBar</span></span></div></p>
<p><div><span style="font-size: 10pt; font-family: 微软雅黑; background-color: #000000;"><span style="color: #79abff;">&lt;<span style="color: #bed6ff;">item<span style="color: windowtext;"> </span>name</span></span><span style="color: #d8d8d8;">=</span><span style="color: #ffc600;">“android:colorPrimaryDark”<span style="color: #79abff;">&gt;</span></span><span style="color: #d8d8d8;">?attr/bg_title_color</span><span style="color: #79abff;">&lt;/<span style="color: #bed6ff;">item</span>&gt;  </span><span style="color: #3cb371;">// 状态栏</span></span></div><br><span style="background-color: #000000;"><span style="font-size: 10pt; font-family: 微软雅黑;"><span style="color: #79abff;">&lt;<span style="color: #bed6ff;">item<span style="color: windowtext;"> </span>name</span></span><span style="color: #d8d8d8;">=</span><span style="color: #ffc600;">“android:navigationBarColor”<span style="color: #79abff;">&gt;</span></span><span style="color: #d8d8d8;">?attr/bg_title_color</span><span style="color: #79abff;">&lt;/<span style="color: #bed6ff;">item</span>&gt; </span><span style="color: #3cb371;">// 导航栏</span></span> </span></p>
<p></p>
<p><div>这些基于原生的设置，可能不是很方便(简单的说呢，就是使用 translucentStatus 的时候，布局会跑到状态栏背后)，可能需要添加一个View或设置Margin/Padding来让它不跑上去，这就需要获取ActionBar的高度及StausBar的高度了：</div></p>
<p><div>各系统控件的高度代码获取(代码取自 SystemBarTint 的 SystemBarConfig)：</div></p>
<p><div></div></p>
<p><div><!--WizRtf2Html Charset=0 --><span style="font-weight: bold; font-size: 10pt; font-family: 微软雅黑; background-color: #000000;"><span style="color: #ffffff;">private</span><span style="color: #d8d8d8; font-weight: normal;"> </span><span style="color: #ffffff;">static</span><span style="color: #d8d8d8; font-weight: normal;"> </span><span style="color: #ffffff;">final</span><span style="color: #d8d8d8; font-weight: normal;"> <span style="color: #d25252;">String</span> <span style="font-style: italic; text-decoration: underline; color: #efc090;">STATUS_BAR_HEIGHT_RES_NAME</span> = <span style="color: #ffc600;">“status_bar_height”</span>; </span><span style="font-weight: normal;"><span style="color: #3cb371;">// 状态栏高度</span></span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">    <span style="font-weight: bold; color: #ffffff;">private</span> <span style="font-weight: bold; color: #ffffff;">static</span> <span style="font-weight: bold; color: #ffffff;">final</span> <span style="color: #d25252;">String</span> <span style="font-style: italic; text-decoration: underline; color: #efc090;">NAV_BAR_HEIGHT_RES_NAME</span> = <span style="color: #ffc600;">“navigation_bar_height”</span>; </span><span style="font-size: 10pt; font-family: 微软雅黑; background-color: #000000;"><span style="color: #3cb371;"> // 导航栏高度</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">    <span style="font-weight: bold; color: #ffffff;">private</span> <span style="font-weight: bold; color: #ffffff;">static</span> <span style="font-weight: bold; color: #ffffff;">final</span> <span style="color: #d25252;">String</span> <span style="font-style: italic; text-decoration: underline; color: #efc090;">NAV_BAR_HEIGHT_LANDSCAPE_RES_NAME</span> = <span style="color: #ffc600;">“navigation_bar_height_landscape”</span>;</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">    <span style="font-weight: bold; color: #ffffff;">private</span> <span style="font-weight: bold; color: #ffffff;">static</span> <span style="font-weight: bold; color: #ffffff;">final</span> <span style="color: #d25252;">String</span> <span style="font-style: italic; text-decoration: underline; color: #efc090;">NAV_BAR_WIDTH_RES_NAME</span> = <span style="color: #ffc600;">“navigation_bar_width”</span>;</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">    <span style="font-weight: bold; color: #ffffff;">private</span> <span style="font-weight: bold; color: #ffffff;">int</span> <span style="font-weight: bold; color: #ffffff;">getInternalDimensionSize</span>(<span style="text-decoration: underline; color: #d25252;">Resources</span> <span style="color: #79abff;">res</span>, <span style="color: #d25252;">String</span> <span style="color: #79abff;">key</span>) {</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">        <span style="font-weight: bold; color: #ffffff;">int</span> <span style="font-weight: bold; color: #bed6ff;">result</span> = <span style="color: #7fb347;">0</span>;</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">        <span style="font-weight: bold; color: #ffffff;">int</span> <span style="font-weight: bold; color: #bed6ff;">resourceId</span> = <span style="color: #79abff;">res</span>.getIdentifier(<span style="color: #79abff;">key</span>, <span style="color: #ffc600;">“dimen”</span>, <span style="color: #ffc600;">“android”</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">        <span style="font-weight: bold; color: #ffffff;">if</span> (<span style="color: #79abff;">resourceId</span> &gt; <span style="color: #7fb347;">0</span>) {</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">            <span style="color: #79abff;">result</span> = <span style="color: #79abff;">res</span>.getDimensionPixelSize(<span style="color: #79abff;">resourceId</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">        }</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">        <span style="font-weight: bold; color: #ffffff;">return</span> <span style="color: #79abff;">result</span>;</span></div><br><span style="background-color: #000000;"><span style="font-size: 10pt; color: #d8d8d8; font-family: '微软雅黑';">    }</span>  </span></p>
<p></p>
<p><div></div></p>
<p><div>或通过开源项目 <a href="http://https://github.com/jgilfelt/systembartint" target="_blank" rel="external">SystemBarTint </a>可以达到一个相对不错的效果，SystemBarTint 设置沉浸式以后，添加代码：</div></p>
<p><div></div></p>
<p><div><!--WizRtf2Html Charset=0 --><span style="font-size: 10pt; color: #bed6ff; font-family: 微软雅黑; background-color: #000000;">mSystemBarTintManager<span style="color: #d8d8d8;"> = <span style="font-weight: bold; color: #ffffff;">new</span> <span style="color: #ffffff;">SystemBarTintManager</span>(<span style="font-weight: bold; color: #ffffff;">this</span>);</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;"><span style="color: #bed6ff;">mSystemBarTintManager</span>.<span style="color: #ffffff;">setStatusBarTintEnabled</span>(<span style="font-weight: bold; color: #ffffff;">true</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;"><span style="color: #bed6ff;">mSystemBarTintManager</span>.<span style="color: #ffffff;">setNavigationBarTintEnabled</span>(<span style="font-weight: bold; color: #ffffff;">true</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;"> <span style="color: #c7dd0c;">// 获取到颜色</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;"><span style="color: #d25252;">TypedArray</span> <span style="font-weight: bold; color: #bed6ff;">_ta</span> = <span style="color: #bed6ff;">getTheme</span>().<span style="color: #ffffff;">obtainStyledAttributes</span>(<span style="color: #d25252;">YogaUtil</span>.<span style="font-style: italic; color: #bed6ff;">getInstance</span>().<span style="color: #ffffff;">getThemeResId</span>(), <span style="font-weight: bold; color: #ffffff;">new</span> <span style="font-weight: bold; color: #ffffff;">int</span>[]{<span style="color: #d25252;">R</span>.<span style="color: #d25252;">attr</span>.<span style="font-style: italic; color: #efc090;">bg_title_color</span>});</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;"> <span style="color: #bed6ff;">mSystemBarTintManager</span>.<span style="color: #ffffff;">setStatusBarTintColor</span>(<span style="color: #79abff;">_ta</span>.<span style="color: #ffffff;">getColor</span>(<span style="color: #7fb347;">0</span>, <span style="color: #bed6ff;">getTitleColor</span>()));</span></div><br><span style="font-size: 10pt; color: #d8d8d8; font-family: '微软雅黑';"><span style="color: #79abff;"><span style="background-color: #000000;">_ta</span></span><span style="background-color: #000000;">.<span style="color: #ffffff;">recycle</span>();</span></span><span style="background-color: #000000;">  </span></p>
<p></p>
<p><div>达到效果：</div></p>
<p><div><a href=""><img src="/image/84d2ab13-2c75-491f-a2b6-50e5e88e820b.png" alt="84d2ab13-2c75-491f-a2b6-50e5e88e820b"></a></div></p>
<p><div>SystemBarTint加通过类似代码:</div></p>
<p><div></div></p>
<p><div><!--WizRtf2Html Charset=0 --><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">            <span style="color: #c7dd0c;">// 状态栏透明</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">            <span style="color: #d25252;">BaseActivity</span> <span style="font-weight: bold; color: #bed6ff;">_ba</span> = ((<span style="color: #d25252;">BaseActivity</span>) <span style="color: #79abff;">_activity</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">            <span style="color: #79abff;">_ba</span>.<span style="color: #ffffff;">getSystemBarTintManager</span>().<span style="color: #ffffff;">setStatusBarAlpha</span>(<span style="color: #7fb347;">0</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">            <span style="color: #bed6ff;">setTitle</span>(<span style="font-weight: bold; color: #ffffff;">null</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">            <span style="font-weight: bold; color: #ffffff;">try</span> {</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="font-weight: bold; color: #ffffff;">if</span> (android.os.<span style="color: #d25252;">Build</span>.<span style="color: #d25252;">VERSION</span>.<span style="font-style: italic; color: #efc090;">SDK_INT</span> &gt;= android.os.<span style="color: #d25252;">Build</span>.<span style="color: #d25252;">VERSION_CODES</span>.<span style="font-style: italic; color: #efc090;">KITKAT</span>) {</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                    <span style="color: #79abff;">_activity</span>.<span style="color: #ffffff;">getActionBar</span>().<span style="color: #bed6ff;">setBackgroundDrawable</span>(<span style="color: #bed6ff;">getResources</span>().<span style="color: #d25252;">getDrawable</span>(<span style="color: #d25252;">R</span>.<span style="color: #d25252;">drawable</span>.<span style="font-style: italic; color: #efc090;">bg_transparent</span>));</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                }</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #c7dd0c;">// 设置按钮</span></span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #d25252;">View</span> <span style="font-weight: bold; color: #bed6ff;">_customView</span> = <span style="color: #79abff;">_activity</span>.<span style="color: #ffffff;">getActionBar</span>().<span style="color: #bed6ff;">getCustomView</span>();</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #d25252;">Button</span> <span style="font-weight: bold; color: #bed6ff;">_btnLeft</span> = (<span style="color: #d25252;">Button</span>) <span style="color: #79abff;">_customView</span>.<span style="color: #ffffff;">findViewById</span>(<span style="color: #d25252;">R</span>.<span style="color: #d25252;">id</span>.<span style="font-style: italic; color: #efc090;">btn_title_left</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #79abff;">_btnLeft</span>.<span style="color: #ffffff;">setText</span>(<span style="color: #d25252;">R</span>.<span style="color: #d25252;">string</span>.<span style="font-style: italic; color: #efc090;">xiamen</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #79abff;">_btnLeft</span>.<span style="color: #ffffff;">setOnClickListener</span>(<span style="font-weight: bold; color: #ffffff;">this</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #79abff;">_btnLeft</span>.<span style="color: #ffffff;">setVisibility</span>(<span style="color: #d25252;">View</span>.<span style="font-style: italic; color: #efc090;">VISIBLE</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #d25252;">Button</span> <span style="font-weight: bold; color: #bed6ff;">_btnRight</span> = (<span style="color: #d25252;">Button</span>) <span style="color: #79abff;">_customView</span>.<span style="color: #ffffff;">findViewById</span>(<span style="color: #d25252;">R</span>.<span style="color: #d25252;">id</span>.<span style="font-style: italic; color: #efc090;">btn_title_right</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #79abff;">_btnRight</span>.<span style="color: #ffffff;">setText</span>(<span style="color: #d25252;">R</span>.<span style="color: #d25252;">string</span>.<span style="font-style: italic; color: #efc090;">preference</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #79abff;">_btnRight</span>.<span style="color: #ffffff;">setOnClickListener</span>(<span style="font-weight: bold; color: #ffffff;">this</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                <span style="color: #79abff;">_btnRight</span>.<span style="color: #ffffff;">setVisibility</span>(<span style="color: #d25252;">View</span>.<span style="font-style: italic; color: #efc090;">VISIBLE</span>);</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">            } <span style="font-weight: bold; color: #ffffff;">catch</span> (<span style="color: #d25252;">Exception</span> <span style="font-weight: bold; color: #bed6ff;">e</span>) {</span></div></p>
<p><div><span style="font-size: 10pt; color: #d8d8d8; font-family: 微软雅黑; background-color: #000000;">                </span></div><br><span style="background-color: #000000;"><span style="font-size: 10pt; color: #d8d8d8; font-family: '微软雅黑';">            }</span>  </span></p>
<p></p>
<p><div>我实现了效果：</div></p>
<p><div>(4.1系统<span style="font-size: 10.5pt; line-height: 1.5;">)</span></div></p>
<p><div><a href="6717b0fc-9466-4a94-a984-d2c549ac3b47.png"><img src="/image/6717b0fc-9466-4a94-a984-d2c549ac3b47.png" alt="6717b0fc-9466-4a94-a984-d2c549ac3b47"></a></div></p>
<p><div>(4.4系统)</div></p>
<p><div><a href="42b0849f-e051-47bc-87b8-fd88ccb105e4.jpg"><img src="/image/42b0849f-e051-47bc-87b8-fd88ccb105e4.jpg" alt="42b0849f-e051-47bc-87b8-fd88ccb105e4"></a></div></p>
<p><div>参考资料：</div></p>
<p><div><span style="font-family: 微软雅黑;">    官方对4.4沉浸式体验的教程：<a href="http://https://developer.android.com/training/system-ui/immersive.html" target="_blank" rel="external">https://developer.android.com/training/system-ui/immersive.html</a></span></div></p>
<p><div>    SystemBarTint：<a href="http://https://github.com/jgilfelt/systembartint" target="_blank" rel="external">https://github.com/jgilfelt/SystemBarTint</a></div><br>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[获取app在特定dpi下的图片(指定dpi的activity icon)]]></title>
      <url>http://eraise.xyz/2015/10/28/e8-8e-b7-e5-8f-96app-e5-9c-a8-e7-89-b9-e5-ae-9adpi-e4-b8-8b-e7-9a-84-e5-9b-be-e7-89-87-e6-8c-87-e5-ae-9adpi-e7-9a-84activity-icon/</url>
      <content type="html"><![CDATA[<p>获取  res 下的图片，最重要的是</p>
<p><div><span style="color: #ff0000;"><span style="font-size: 10pt; font-family: 微软雅黑;">Package.getResourcesForActivity(component).getDrawableForDensity(resId, Display.Metrics.XXHIGH);</span>  </span></div></p>
<p><div>这个方法，即通过DrawableForDensity去获取，这个方法的加入是API 15，但是在14的时候已经可以调用，更早的没有测试。</div></p>
<p><div>以下是获取一个Activity的Icon的代码：</div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 通过包名和Activity名获取Activity的icon,如果得不到activity的icon则获取包的</div><div class="line">   * <span class="doctag">@param</span> packageName</div><div class="line">   * <span class="doctag">@param</span> activityName</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="meta">@SuppressLint</span>(“NewApi”)</div><div class="line">  <span class="function"><span class="keyword">public</span> Drawable <span class="title">getActivityIcon</span><span class="params">(String packageName, String activityName)</span> </span>&#123;</div><div class="line">      ComponentName component = <span class="keyword">new</span> ComponentName(packageName, activityName);</div><div class="line">      PackageManager pm = mContext.getPackageManager();</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">          <span class="keyword">int</span> iconId = pm.getActivityInfo(component, <span class="number">0</span>).icon;</div><div class="line">          <span class="keyword">if</span> (iconId == <span class="number">0</span>) &#123;</div><div class="line">              iconId = pm.getApplicationInfo(packageName, <span class="number">0</span>).icon;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span> (iconId &gt; <span class="number">0</span> &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">14</span>) &#123;</div><div class="line"><span class="comment">//                Method method = Resource.class.getMethod(“getDrawableForDensity”, </span></div><div class="line">                                            <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</div><div class="line"><span class="comment">//                return (Drawable) method.invoke(pm.getResourcesForActivity(component),</span></div><div class="line">                                            iconId, DisplayMetrics.DENSITY_XXHIGH);</div><div class="line">              Drawable d = <span class="keyword">null</span>;</div><div class="line">              <span class="keyword">int</span> displayMetrics[] = &#123; <span class="number">640</span>, DisplayMetrics.DENSITY_XXHIGH,</div><div class="line">                                           DisplayMetrics.DENSITY_XHIGH,</div><div class="line">                                           DisplayMetrics.DENSITY_HIGH &#125;;</div><div class="line">              <span class="keyword">for</span> (<span class="keyword">int</span> dm : displayMetrics) &#123;</div><div class="line">                  d = pm.getResourcesForActivity(component).getDrawableForDensity(iconId, dm);</div><div class="line">                  <span class="keyword">if</span> (d != <span class="keyword">null</span>) &#123;</div><div class="line">                      <span class="keyword">return</span> d;</div><div class="line">                  &#125;</div><div class="line">              &#125;</div><div class="line">              <span class="keyword">return</span> pm.getActivityIcon(component);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">return</span> pm.getActivityIcon(component);</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">              <span class="keyword">return</span> pm.getApplicationIcon(packageName);</div><div class="line">          &#125; <span class="keyword">catch</span> (NameNotFoundException e1) &#123;</div><div class="line">              <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p><div>这个方法得到尽可能大(极限是 xxxhdpi)的ActivityIcon，当得不到ActivityIcon就拿PackageIcon</div></p>
<p><div></div></p>
<p><div></div><br><br>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ImageSpan 可点击、图片与设置不一样大]]></title>
      <url>http://eraise.xyz/2015/10/28/imagespan-e5-8f-af-e7-82-b9-e5-87-bb-e3-80-81-e5-9b-be-e7-89-87-e4-b8-8e-e8-ae-be-e7-bd-ae-e4-b8-8d-e4-b8-80-e6-a0-b7-e5-a4-a7/</url>
      <content type="html"><![CDATA[<p><span style="color: #0000ff;">ImageSpan</span>可以在<span style="color: #0000ff;">TextView</span>中嵌入图片。又或者说，<span style="color: #993366;">android.text.style.*</span> 里面的东西可以放在 <span style="color: #0000ff;">SpannableString</span> 里再设置到 <span style="color: #0000ff;">TextView </span>里可以使 <span style="color: #0000ff;">TextView </span>显示出不同的效果（ <span style="color: #0000ff;">Html</span>.<span style="color: #000080;">fromHtml()</span> 就是返回一个<span style="color: #0000ff;">SpannableString</span>或<span style="color: #0000ff;">Spannabed</span>）。在设置 <span style="color: #0000ff;">ImageSpan </span>的时候，出现了一个问题是设置进行的 <span style="color: #0000ff;">Bitmap </span>画出来的大小并不是原来 <span style="color: #0000ff;">Bitmap </span>的大小，经过源码查看，发现是 <span style="color: #0000ff;">ImageSpan </span>当中通过 new <span style="color: #0000ff;">BitmapDrawable</span>(<span style="color: #000080;">context.getResoutces(), b</span>) 或 <span style="color: #993366;">new</span> <span style="color: #0000ff;">BitmapDrawable</span>(b) 生成 <span style="color: #0000ff;">Drawable </span>导致的。</p>
<p><div>根据 api ，new <span style="color: #0000ff;">BitmapDrawable</span>的时候不传入 <span style="color: #0000ff;">Context</span> ，则是不处理密度生成<span style="color: #0000ff;">Drawable</span>，这个时候就会出现设置进去的 <span style="color: #0000ff;">Bitmap </span>跟画出来的图片大小不一致，达不到我想要的效果。</div></p>
<p><div><span style="color: #0000ff;">TextView</span>设置<span style="color: #0000ff;">SpannableString</span>，也是可以做点击的，对于 Span 的监听，主要是在 <span style="color: #0000ff;">TextView</span>.<span style="color: #000080;">setMovementMethod()</span> 方法当中传入的方法中的问题，原本我们可以通过 <span style="color: #0000ff;">TextView</span>.<span style="color: #000080;">setMovementMethod</span>(<span style="color: #993366;">new </span><span style="color: #0000ff;">LinkMovementMethod</span>()) 使 <span style="color: #0000ff;">ClickableSpan</span>(<span style="color: #0000ff;">UrlSpan</span>) 生效，但是<span style="color: #0000ff;">ImageSpan</span>本身并没有实现<span style="color: #0000ff;">ClickableSpan</span>，而在 <span style="color: #0000ff;">LinkMovementMethod </span>中，处理的只有<span style="color: #0000ff;">ClickableSpan</span>，所以我们重写卫<span style="color: #0000ff;">LinkMovementMethod</span>，使之处理 <span style="color: #0000ff;">ImageSpan</span>， 同时需要重写 <span style="color: #0000ff;">ImageSpan </span>使之拥有 <span style="color: #000080;">onClick </span>(或其他方法，只要在 <span style="color: #0000ff;">LinkMovementMethod</span> 的 <span style="color: #000080;">onTouchEvent </span>中调用即可)。</div></p>
<p><div></div></p>
<p><div>参考资料： <a href="http://www.cnblogs.com/luction/p/3645210.html" target="_blank" rel="external">http://www.cnblogs.com/luction/p/3645210.html</a></div><br>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[只在主界面应用上显示的悬浮窗]]></title>
      <url>http://eraise.xyz/2015/10/28/e5-8f-aa-e5-9c-a8-e4-b8-bb-e7-95-8c-e9-9d-a2-e5-ba-94-e7-94-a8-e4-b8-8a-e6-98-be-e7-a4-ba-e7-9a-84-e6-82-ac-e6-b5-ae-e7-aa-97/</url>
      <content type="html"><![CDATA[<p><script id="wiz_editor_localize" src="D:\Program Files (x86)\WizNote\WizTools\htmleditor\localize.js?t=1446036111862" type="text/javascript" charset="utf-8"></script><script id="wizEditor" src="D:\Program Files (x86)\WizNote\WizTools\htmleditor\plugins\wizEditor.js?t=1446036111875" type="text/javascript" charset="utf-8"></script><script id="wizEditorHelper" src="D:\Program Files (x86)\WizNote\WizTools\htmleditor\plugins\editor_helper.js?t=1446036111892" type="text/javascript" charset="utf-8"></script></p>
<p><div></div></p>
<p><div><span style="color: #3366ff; font-family: Consolas;"><span style="font-size: 15px; line-height: 22px;"><strong>悬浮窗是把控件添加到WindowManager并且设置其 WindowManager.Layoutparams设置为包含控件大小、类型为ALERT等可弹出的等。</strong></span></span></div></p>
<p><div><span style="color: #3366ff; font-family: Consolas;"><span style="font-size: 15px; line-height: 22px;"><strong>悬浮窗用处很多，其中包括：ListView/GridView的拖动、Toast等</strong></span></span></div></p>
<p><div><span style="color: #3f5fbf; font-family: Consolas;"><span style="font-size: 15px; line-height: 22px;"> </span></span></div></p>
<p><div><!--WizRtf2Html Charset=0 --><span style="font-size: 11pt; color: #3f5fbf; font-family: 'Consolas';"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 在 manifest.xml 中应该配置权限 android.permission.SYSTEM_ALERT_WINDOW</div><div class="line"> * 为了只在主界面应用才显示，需要获取任务栈，</div><div class="line"> * 需要权限 android.permission.GET_TASKS</div><div class="line"> * 把悬浮窗布局/控件添加到 WindowManager 上，</div><div class="line"> * 并且设置 WindowManager.LayoutParams 即可，</div><div class="line"> * 通过监听触摸事件，并且更新 WindowManager.LayoutParams 的x,y就可以更新位置</div><div class="line"> * <span class="doctag">@author</span>: 思落羽</div><div class="line"> * <span class="doctag">@date</span>: 2014–2–12</div><div class="line"> * <span class="doctag">@Description</span>:</div><div class="line"> */</div></pre></td></tr></table></figure></span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuspendButtonService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACTION_OPERATE = “action_operate”;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">short</span> OPERATE_SHOW = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">short</span> OPERATE_HIDE = <span class="number">2</span>;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> added = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> show = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">protected</span> WindowManager.LayoutParams wmParams;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查当前是否为主界面应用</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> Handler hCheckMain;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 主界面包名</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> List&lt;String&gt; homeNames;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Button btn;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">(Intent intent, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (intent != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">/* 获取操作来确定当前应该显示或是取消显示 */</span></div><div class="line">            <span class="keyword">short</span> operate = intent.getShortExtra(ACTION_OPERATE, (<span class="keyword">short</span>)<span class="number">0</span>);</div><div class="line">            <span class="keyword">switch</span>(operate) &#123;</div><div class="line">            <span class="keyword">case</span> OPERATE_SHOW:</div><div class="line">                added = <span class="keyword">true</span>;</div><div class="line">                show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> OPERATE_HIDE:</div><div class="line">                added = <span class="keyword">false</span>;</div><div class="line">                hide();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化共用的对象</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/* 2003是 WindowManager.LayoutParams.TYPE_SySTEM_ALERT 的值</span></div><div class="line">         * 初始化 WindowManager.LayoutParams */</div><div class="line">        wmParams = <span class="keyword">new</span> WindowManager.LayoutParams(WindowManager.LayoutParams.WRAP_CONTENT,</div><div class="line">                WindowManager.LayoutParams.WRAP_CONTENT, <span class="number">2003</span>,</div><div class="line">                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,</div><div class="line">                PixelFormat.RGBA_8888); <span class="comment">// 类型要为透明才不会把背景也覆盖掉</span></div><div class="line">        <span class="comment">/* 获取悬浮窗控件 */</span></div><div class="line">        btn = (Button) LayoutInflater.from(<span class="keyword">this</span>)</div><div class="line">                .inflate(R.layout.demo_suspend_button, <span class="keyword">null</span>);</div><div class="line">        btn.setOnTouchListener(<span class="keyword">new</span> TouchBtn());</div><div class="line">        btn.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                Toast.makeText(SuspendButtonService.<span class="keyword">this</span>, “点击了悬浮窗”, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取到桌面应用的应用名称</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> List&lt;String&gt; <span class="title">getHomes</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;String&gt;();</div><div class="line">        PackageManager packageManager = getPackageManager();</div><div class="line">        <span class="comment">/* 找出action为 Intent.ACTION_MAIN，</span></div><div class="line">         * Category为Intent.CATEGORY_HOME的包的包名，这个包就是主界面的包 */</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_MAIN);</div><div class="line">        intent.addCategory(Intent.CATEGORY_HOME);</div><div class="line">        <span class="comment">/* 查找intent可以唤醒的Activity的信息 */</span></div><div class="line">        List&lt;ResolveInfo&gt; resolveInfos = packageManager</div><div class="line">                .queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);</div><div class="line">        <span class="keyword">for</span> (ResolveInfo resolveInfo : resolveInfos) &#123;</div><div class="line">            names.add(resolveInfo.activityInfo.packageName);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> names;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 把悬浮窗添加到 WindowManager上</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!show) &#123;</div><div class="line">            show = <span class="keyword">true</span>;</div><div class="line">            <span class="comment">/* 获取 WindowManager */</span></div><div class="line">            WindowManager wm = (WindowManager) getSystemService(Service.WINDOW_SERVICE);</div><div class="line">            wm.addView(btn, wmParams);</div><div class="line">            checkMain();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 把悬浮穿从 WindowManager 上移除</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">hide</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (show) &#123;</div><div class="line">            show = <span class="keyword">false</span>;</div><div class="line">            <span class="comment">/* 获取 WindowManager */</span></div><div class="line">            WindowManager wm = (WindowManager) getSystemService(Service.WINDOW_SERVICE);</div><div class="line">            wm.removeView(btn);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查当前界面是否在主界面，悬浮穿控件为只在主界面显示</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkMain</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/* hCheckMain 为空就新建 */</span></div><div class="line">        <span class="keyword">if</span> (hCheckMain == <span class="keyword">null</span>) &#123;</div><div class="line">            homeNames = getHomes();</div><div class="line">            hCheckMain = <span class="keyword">new</span> Handler(<span class="keyword">new</span> Handler.Callback() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (isHome()) &#123;</div><div class="line">                        <span class="keyword">if</span> (!show)</div><div class="line">                            show();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">if</span> (show)</div><div class="line">                            hide();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (added) &#123;</div><div class="line">                        <span class="comment">/* 1秒后扫描当前是否需要显示 */</span></div><div class="line">                        hCheckMain.sendEmptyMessageDelayed(<span class="number">0</span>, <span class="number">1000</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* 1秒扫描一次当前是否在主界面 */</span></div><div class="line">        hCheckMain.sendEmptyMessageDelayed(<span class="number">0</span>, <span class="number">1000</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前界面是否为主界面</div><div class="line">     * <span class="doctag">@return</span> 为Home界面则返回true，否则为false</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHome</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">/* 获取 ActivityManager ，检查是否存在主界面 */</span></div><div class="line">        ActivityManager activityManager =</div><div class="line">                (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);</div><div class="line">        <span class="comment">/* 获取当前正在运行的任务 */</span></div><div class="line">        List&lt;RunningTaskInfo&gt; infos = activityManager.getRunningTasks(<span class="number">1</span>);</div><div class="line">        <span class="comment">/* 主界面是否包含了当前正在运行的任务的包名 */</span></div><div class="line">        <span class="comment">/* RunningTaskInfo 是任务栈信息，得到栈顶的Activity再去获取期包名 */</span></div><div class="line">        <span class="keyword">return</span> homeNames.contains(infos.get(<span class="number">0</span>).topActivity.getPackageName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">TouchBtn</span> <span class="keyword">implements</span> <span class="title">OnTouchListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">float</span> x;</div><div class="line">        <span class="keyword">float</span> y;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                down(v, event);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                up(v, event);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                move(v, event);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">            <span class="comment">/* 按下时记录按下的坐标 */</span></div><div class="line">            x = event.getX();</div><div class="line">            y = event.getY();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (x == event.getX() &amp;&amp; y == event.getY()) &#123;</div><div class="line">                <span class="comment">/* 松开与点下的x y不变，视为点击 */</span></div><div class="line">                v.performClick();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line"></div><div class="line">            <span class="comment">/* 获取 WindowManager */</span></div><div class="line">            WindowManager wm = (WindowManager) getSystemService(Service.WINDOW_SERVICE);</div><div class="line">            <span class="comment">/* 设置新的x y的值 */</span></div><div class="line">            wmParams.x += event.getX() – x;</div><div class="line">            wmParams.y += event.getY() – y;</div><div class="line">            <span class="comment">/* 更新位置 */</span></div><div class="line">            wm.updateViewLayout(v, wmParams);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ksoap2 连接 webservice]]></title>
      <url>http://eraise.xyz/2015/10/28/ksoap2-e8-bf-9e-e6-8e-a5-webservice/</url>
      <content type="html"><![CDATA[<p>ksoap2 连接 webservice，ksoap2 较为轻型，适合Android使用，Android没有内置WebService工具，WebService传回数据是标准的XML，可以用SoapObject直接得到结点值<br>ksoap2 code.google.com地址：<a href="https://code.google.com/p/ksoap2-android/" target="_blank" rel="external">https://code.google.com/p/ksoap2-android/</a><br>下载的ksoap2-android-assembly-x.x.x-jar-with-dependencies.jar文件放到libs中就可以使用了。</p>
<p>ksoap2主要使用对象： <code>SoapObject</code>(连接参数描述)、 <code>SoapSerializationEnvelope</code>(连接描述)、<code>HttpTransportSE</code>(发起连接)、<code>SoapFault/SoapFault12</code>(错误描述，可以打印错误栈)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_SPACE = “http:<span class="comment">//WebXml.com.cn/”;</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = “http:<span class="comment">//www.webxml.com.cn/WebServices/ChinaZipSearchWebService.asmx”;</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_NAME = “getSupportProvince”;</div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SOAP_ACTION = NAME_SPACE + METHOD_NAME;   <span class="comment">// 通常为NAME_SPACE + METHOD_NAME，为null会连接不上</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">conn</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="comment">/* 生成SoapObject对象，指明要连接的对象</span></div><div class="line">     * 第一个参数为命名空间，第二个参数为方法 */</div><div class="line">          SoapObject so = <span class="keyword">new</span> SoapObject(NAME_SPACE, METHOD_NAME);</div><div class="line">     <span class="comment">/* 方法携带的参数 */</span></div><div class="line">     <span class="comment">// so.addProperty(“tns:getWeatherbyCityNameSoapIn”, “福建”);</span></div><div class="line">     <span class="comment">/* SOAP信息描述，传入的参数是WebService soap版本 */</span></div><div class="line">     SoapSerializationEnvelope sse = <span class="keyword">new</span> SoapSerializationEnvelope(SoapSerializationEnvelope.VER11);</div><div class="line">     <span class="comment">/* 设置输入接收对象 */</span></div><div class="line">     sse.bodyOut = so;</div><div class="line">     sse.setOutputSoapObject(so);</div><div class="line">     sse.dotNet = <span class="keyword">true</span>;     <span class="comment">// 这行功能未知，注释掉同样可以取得连接，wsdl的必须为true</span></div><div class="line">     <span class="comment">/* 创建HttpTransportSE，这个对象描述了WebService的URL，由它来进行连接 */</span></div><div class="line">     HttpTransportSE ht = <span class="keyword">new</span> HttpTransportSE(URL);</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">/* 开始连接 */</span></div><div class="line">          ht.call(SOAP_ACTION, sse);</div><div class="line">          <span class="comment">/* 获取连接结果，造成错误经常是代码里的问题，如果测试通过应该不管是否成功都返回SoapObject */</span></div><div class="line">          <span class="keyword">if</span> (sse.bodyIn <span class="keyword">instanceof</span> SoapObject) &#123;</div><div class="line">               SoapObject rso = (SoapObject) sse.bodyIn;</div><div class="line">               SoapObject result = (SoapObject) rso.getProperty(METHOD_NAME + “Result”);</div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.getPropertyCount(); i ++) &#123;</div><div class="line">                    System.out.println(result.getProperty(i));</div><div class="line">                    tv.append(result.getProperty(i).toString() + “\n”);</div><div class="line">               &#125;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">          SoapFault sf = (SoapFault) sse.getResponse();</div><div class="line">         sf.printStackTrace();</div><div class="line">          &#125;</div><div class="line">     &#125; <span class="keyword">catch</span> (HttpResponseException e) &#123;</div><div class="line">          <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">          e.printStackTrace();</div><div class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">          <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">          e.printStackTrace();</div><div class="line">     &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</div><div class="line">          <span class="comment">// TODO Auto-generated catch block</span></div><div class="line">          e.printStackTrace();</div><div class="line">     &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NotificationManager和Notification]]></title>
      <url>http://eraise.xyz/2015/10/27/notificationmanager-e5-92-8cnotification/</url>
      <content type="html"><![CDATA[<p>Notification 是下拉列表与状态栏信息显示控件，最常见的案例是短信 —– 收到短信的时候，状态栏会显示通知提示，LED灯亮起，提示音响起，手机震动，下拉栏里新增该信息的通知，点击该通知将跳转到信息Activity中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 得到 NotificationManager 对象，这个对象的获取通过 Context 的 getSystemSerivce 可以得到</span></div><div class="line">NotificationManager nm = (NotificationManager) <span class="keyword">this</span>.getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line"> <span class="comment">// 创建一个 Notification 对象， 这里传入的三个值是显示在状态栏上的，其中第二项将会在刚显示的时候出现</span></div><div class="line">Notification notification = <span class="keyword">new</span> Notification(android.R.drawable.stat_notify_chat, “Hello World”, System.currentTimeMillis());</div><div class="line"> <span class="comment">// 点击了该 Notification(通知) 打开的窗口</span></div><div class="line">Intent notificationIntent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ListActivity.class);</div><div class="line"> <span class="comment">// Notification 的Intent</span></div><div class="line">PendingIntent contentIntent = PendingIntent. getActivity(<span class="keyword">this</span>, <span class="number">0</span>, notificationIntent, <span class="number">0</span>);</div><div class="line"><span class="comment">// 调用系统 Notification 的话，在下拉列表里显示的信息(图标已经在上面设置过)</span></div><div class="line">notification.setLatestEventInfo( <span class="keyword">this</span>, “我是Title” , “这是一条通知”, contentIntent);</div><div class="line"> <span class="comment">// 显示 Notification</span></div><div class="line">nm.notify(<span class="number">0</span>, notification);</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>PendingIntent 的 requestCode 如果设置成同一个值，那么就会根据 flag 进行相关操作，两个 PendingIntent被认为是同一个</strong></p>
</li>
<li><p><strong>自定义 Notification 样式的核心是设置contentView为一个RemoteView</strong></p>
</li>
</ul>
<h4 id="相关资料："><a href="#相关资料：" class="headerlink" title="相关资料："></a>相关资料：</h4><p><a href="http://blog.csdn.net/ddna/article/details/5122083" target="_blank" rel="external">http://blog.csdn.net/ddna/article/details/5122083</a></p>
<p><div align="left">               <a href="http://blog.csdn.net/furongkang/article/details/6900338" target="_blank" rel="external">http://blog.csdn.net/furongkang/article/details/6900338</a></div><br><br>&nbsp;</p>
<p>&nbsp;</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SAX解析小记]]></title>
      <url>http://eraise.xyz/2015/10/27/sax-e8-a7-a3-e6-9e-90-e5-b0-8f-e8-ae-b0/</url>
      <content type="html"><![CDATA[<ol>
<li>SAX解析需要先通过SAXParserFactory.newInstance()得到SAXParseFacotry，</li>
<li>通过SAXParserFactory得到SAXParser，直接执行SAXParser的parser方法或通过SAXParser得到XMLReader</li>
<li>通过SAXParser得到XMLReader</li>
<li>设置XMLReader的ContentHandler(内容处理者)为DefaultHandler</li>
<li>调用XMLReader的parser()方法开始解析</li>
</ol>
<p><strong>↑↑↑这些步骤都是死板的</strong><br><strong>需要记住的是DefaultHandler的继承，对于内部方法的重载：</strong></p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>startDocument()</code></td>
<td>调用于文件的开始</td>
</tr>
<tr>
<td><code>endDocument()</code></td>
<td>调用于文件的结束</td>
</tr>
<tr>
<td><code>startElement(String uri, String localName, String qName, Attributes)</code></td>
<td>调用于元素的开始，元素开始就是一个元素如<book>出现</book></td>
</tr>
<tr>
<td><code>endElement(String uri, String localName, String qName)</code></td>
<td>用于元素的结束，元素结束就是一个元素如出现</td>
</tr>
<tr>
<td><code>characters(char[] ch, int start, int length)</code></td>
<td>调用于元素开始之后，如果一个元素如<book>think in java </book>出现，在startElement方法被调用以后，将会调用characters，这个时候可以得到 “think in java” 这个字符串。</td>
</tr>
</tbody>
</table>
<p><span style="color:#F66">SAX的使用需要注意的是：SAX的元素因为在characters中调用，所以并不知道这个文本属于哪个元素，需要有一个记录当前元素的东西。</span></p>
<blockquote>
<p>XML有开始元素和结束元素，在开始元素跟结束元素之间，还会存在一些元素，要保持xml文件当中的结构用Stack是一个不错的选择。</p>
</blockquote>
<hr>
<p>DOM生成XML通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">transformer.setOutputProperty(OutputKeys. INDENT, “yes” );</div><div class="line">transformer.setOutputProperty( “&#123;http:<span class="comment">//xml.apache.org/xalan&#125;indent-amount” , “2” );</span></div></pre></td></tr></table></figure></p>
<p>设置缩进</p>
]]></content>
    </entry>
    
  
  
</search>
